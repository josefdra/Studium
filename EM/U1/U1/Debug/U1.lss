
U1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  00000202  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000185  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000fc  00000000  00000000  000003e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000015f  00000000  00000000  000004e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000064  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000176  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000f0  00000000  00000000  0000081e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  0000090e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  88:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_4>:
uint8_t safe;
uint8_t var;
uint8_t helper;
volatile uint8_t start_pressed = 0;

ISR(PCINT1_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	PORTB |= 0x07;
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	87 60       	ori	r24, 0x07	; 7
  a0:	85 b9       	out	0x05, r24	; 5
	start_pressed = 0;
  a2:	10 92 00 01 	sts	0x0100, r1
}
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <__vector_1>:

ISR(INT0_vect){
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
	start_pressed = 1;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 00 01 	sts	0x0100, r24
}
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <main>:

int main(void)
{
	PORTD |= 0x1F;
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	8f 61       	ori	r24, 0x1F	; 31
  d4:	8b b9       	out	0x0b, r24	; 11
	PORTC |= 0x01;
  d6:	40 9a       	sbi	0x08, 0	; 8
	helper = PORTB;
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	80 93 01 01 	sts	0x0101, r24
	DDRB = 0x07;
  de:	87 e0       	ldi	r24, 0x07	; 7
  e0:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0x07;
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	87 60       	ori	r24, 0x07	; 7
  e6:	85 b9       	out	0x05, r24	; 5
	EICRA &= ~((1<<ISC01)|(1<<ISC00));
  e8:	e9 e6       	ldi	r30, 0x69	; 105
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	8c 7f       	andi	r24, 0xFC	; 252
  f0:	80 83       	st	Z, r24
	EICRA |= (1<<ISC01);
  f2:	80 81       	ld	r24, Z
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	80 83       	st	Z, r24
	EIMSK |=(1<<INT0);
  f8:	e8 9a       	sbi	0x1d, 0	; 29
	PCMSK1 |= 0x01;
  fa:	ec e6       	ldi	r30, 0x6C	; 108
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	81 60       	ori	r24, 0x01	; 1
 102:	80 83       	st	Z, r24
	PCICR |= 0x02;
 104:	e8 e6       	ldi	r30, 0x68	; 104
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	80 83       	st	Z, r24
	sei();
 10e:	78 94       	sei
	
	while(1)
	{		
		if(start_pressed)
 110:	80 91 00 01 	lds	r24, 0x0100
 114:	88 23       	and	r24, r24
 116:	e1 f3       	breq	.-8      	; 0x110 <main+0x40>
		{			
			safe = (PIND & 0x03);
 118:	49 b1       	in	r20, 0x09	; 9
 11a:	43 70       	andi	r20, 0x03	; 3
 11c:	40 93 02 01 	sts	0x0102, r20
			safe |= ((PIND & 0x40) >> 3);
 120:	29 b1       	in	r18, 0x09	; 9
 122:	20 74       	andi	r18, 0x40	; 64
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	c9 01       	movw	r24, r18
 128:	95 95       	asr	r25
 12a:	87 95       	ror	r24
 12c:	95 95       	asr	r25
 12e:	87 95       	ror	r24
 130:	95 95       	asr	r25
 132:	87 95       	ror	r24
 134:	84 2b       	or	r24, r20
 136:	80 93 02 01 	sts	0x0102, r24
			for(var = 0 + safe; var < 8; var++){
 13a:	80 93 03 01 	sts	0x0103, r24
 13e:	88 30       	cpi	r24, 0x08	; 8
 140:	38 f7       	brcc	.-50     	; 0x110 <main+0x40>
				if(!start_pressed)
 142:	90 91 00 01 	lds	r25, 0x0100
 146:	99 23       	and	r25, r25
 148:	19 f3       	breq	.-58     	; 0x110 <main+0x40>
 14a:	04 c0       	rjmp	.+8      	; 0x154 <main+0x84>
 14c:	90 91 00 01 	lds	r25, 0x0100
 150:	99 23       	and	r25, r25
 152:	f1 f2       	breq	.-68     	; 0x110 <main+0x40>
					break;
				helper &= 0xF8;
 154:	90 91 01 01 	lds	r25, 0x0101
 158:	98 7f       	andi	r25, 0xF8	; 248
				helper |= var;
 15a:	89 2b       	or	r24, r25
 15c:	80 93 01 01 	sts	0x0101, r24
				PORTB = helper;
 160:	85 b9       	out	0x05, r24	; 5
				helper = PORTB;
 162:	85 b1       	in	r24, 0x05	; 5
 164:	80 93 01 01 	sts	0x0101, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	83 ed       	ldi	r24, 0xD3	; 211
 16c:	90 e3       	ldi	r25, 0x30	; 48
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x9e>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0xa8>
 178:	00 00       	nop
	{		
		if(start_pressed)
		{			
			safe = (PIND & 0x03);
			safe |= ((PIND & 0x40) >> 3);
			for(var = 0 + safe; var < 8; var++){
 17a:	80 91 03 01 	lds	r24, 0x0103
 17e:	8f 5f       	subi	r24, 0xFF	; 255
 180:	80 93 03 01 	sts	0x0103, r24
 184:	88 30       	cpi	r24, 0x08	; 8
 186:	10 f3       	brcs	.-60     	; 0x14c <main+0x7c>
 188:	c3 cf       	rjmp	.-122    	; 0x110 <main+0x40>

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
