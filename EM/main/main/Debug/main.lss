
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000424  000004b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000424  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  0080010a  0080010a  000004c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c8c  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b1  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000521  00000000  00000000  000019e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000474  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000337  00000000  00000000  000024b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000027ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 33       	cpi	r26, 0x39	; 57
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 65 01 	call	0x2ca	; 0x2ca <main>
  9e:	0c 94 10 02 	jmp	0x420	; 0x420 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setEvent>:
void startTimer(uint8_t t_n){
	timers[t_n].running = 1;
}

void cancelTimer(uint8_t t_n){
	timers[t_n].running = 0;
  a6:	2f b7       	in	r18, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <events>
  ae:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <events+0x1>
  b2:	84 2b       	or	r24, r20
  b4:	95 2b       	or	r25, r21
  b6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <events+0x1>
  ba:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <events>
  be:	2f bf       	out	0x3f, r18	; 63
  c0:	78 94       	sei
  c2:	08 95       	ret

000000c4 <change_var>:
  c4:	88 e0       	ldi	r24, 0x08	; 8
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 53 00 	call	0xa6	; 0xa6 <setEvent>
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <timers+0x7>
  d2:	08 95       	ret

000000d4 <check_buttons_and_overflow>:
  d4:	30 99       	sbic	0x06, 0	; 6
  d6:	04 c0       	rjmp	.+8      	; 0xe0 <check_buttons_and_overflow+0xc>
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 53 00 	call	0xa6	; 0xa6 <setEvent>
  e0:	4a 99       	sbic	0x09, 2	; 9
  e2:	04 c0       	rjmp	.+8      	; 0xec <check_buttons_and_overflow+0x18>
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 53 00 	call	0xa6	; 0xa6 <setEvent>
  ec:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <var>
  f0:	88 30       	cpi	r24, 0x08	; 8
  f2:	21 f4       	brne	.+8      	; 0xfc <check_buttons_and_overflow+0x28>
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <setEvent>
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <timers+0xf>
 102:	08 95       	ret

00000104 <clearEvent>:
 104:	4f b7       	in	r20, 0x3f	; 63
 106:	f8 94       	cli
 108:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <events>
 10c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <events+0x1>
 110:	80 95       	com	r24
 112:	90 95       	com	r25
 114:	82 23       	and	r24, r18
 116:	93 23       	and	r25, r19
 118:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <events+0x1>
 11c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <events>
 120:	4f bf       	out	0x3f, r20	; 63
 122:	78 94       	sei
 124:	08 95       	ret

00000126 <declareTimer_milli>:
 126:	e4 2f       	mov	r30, r20
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	ee 0f       	add	r30, r30
 12c:	ff 1f       	adc	r31, r31
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	ee 0f       	add	r30, r30
 134:	ff 1f       	adc	r31, r31
 136:	e2 5f       	subi	r30, 0xF2	; 242
 138:	fe 4f       	sbci	r31, 0xFE	; 254
 13a:	71 83       	std	Z+1, r23	; 0x01
 13c:	60 83       	st	Z, r22
 13e:	93 83       	std	Z+3, r25	; 0x03
 140:	82 83       	std	Z+2, r24	; 0x02
 142:	16 82       	std	Z+6, r1	; 0x06
 144:	15 82       	std	Z+5, r1	; 0x05
 146:	17 82       	std	Z+7, r1	; 0x07
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	84 83       	std	Z+4, r24	; 0x04
 14c:	08 95       	ret

0000014e <__vector_13>:
}

ISR(TIMER1_OVF_vect){
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	ef 92       	push	r14
 15a:	ff 92       	push	r15
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	2f 93       	push	r18
 162:	3f 93       	push	r19
 164:	4f 93       	push	r20
 166:	5f 93       	push	r21
 168:	6f 93       	push	r22
 16a:	7f 93       	push	r23
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25
 170:	af 93       	push	r26
 172:	bf 93       	push	r27
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
 17c:	00 e0       	ldi	r16, 0x00	; 0
 17e:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 5; i++){
 180:	c0 e0       	ldi	r28, 0x00	; 0
 182:	d0 e0       	ldi	r29, 0x00	; 0
						sei();
					}
					counter_intern = 0;
				}
			} else {
				timers[i].counter++;
 184:	0f 2e       	mov	r0, r31
 186:	fe e0       	ldi	r31, 0x0E	; 14
 188:	ef 2e       	mov	r14, r31
 18a:	f1 e0       	ldi	r31, 0x01	; 1
 18c:	ff 2e       	mov	r15, r31
 18e:	f0 2d       	mov	r31, r0
	timers[t_n].running = 0;
}

ISR(TIMER1_OVF_vect){
	for(int i = 0; i < 5; i++){
		if(timers[i].running == 1){
 190:	fe 01       	movw	r30, r28
 192:	ee 0f       	add	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	ee 0f       	add	r30, r30
 198:	ff 1f       	adc	r31, r31
 19a:	ee 0f       	add	r30, r30
 19c:	ff 1f       	adc	r31, r31
 19e:	e2 5f       	subi	r30, 0xF2	; 242
 1a0:	fe 4f       	sbci	r31, 0xFE	; 254
 1a2:	87 81       	ldd	r24, Z+7	; 0x07
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	09 f0       	breq	.+2      	; 0x1aa <__vector_13+0x5c>
 1a8:	72 c0       	rjmp	.+228    	; 0x28e <__vector_13+0x140>
			if(timers[i].multiply == 1){
 1aa:	fe 01       	movw	r30, r28
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	ee 0f       	add	r30, r30
 1b6:	ff 1f       	adc	r31, r31
 1b8:	e2 5f       	subi	r30, 0xF2	; 242
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	84 81       	ldd	r24, Z+4	; 0x04
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	e1 f5       	brne	.+120    	; 0x23a <__vector_13+0xec>
				counter_intern++;
 1c2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1c6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 1d0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
				if(counter_intern == 1000){
 1d4:	88 3e       	cpi	r24, 0xE8	; 232
 1d6:	93 40       	sbci	r25, 0x03	; 3
 1d8:	09 f0       	breq	.+2      	; 0x1dc <__vector_13+0x8e>
 1da:	59 c0       	rjmp	.+178    	; 0x28e <__vector_13+0x140>
					timers[i].counter++;
 1dc:	fe 01       	movw	r30, r28
 1de:	ee 0f       	add	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	ee 0f       	add	r30, r30
 1e4:	ff 1f       	adc	r31, r31
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	e2 5f       	subi	r30, 0xF2	; 242
 1ec:	fe 4f       	sbci	r31, 0xFE	; 254
 1ee:	85 81       	ldd	r24, Z+5	; 0x05
 1f0:	96 81       	ldd	r25, Z+6	; 0x06
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	96 83       	std	Z+6, r25	; 0x06
 1f6:	85 83       	std	Z+5, r24	; 0x05
					if(timers[i].counter == timers[0].duration){
 1f8:	25 81       	ldd	r18, Z+5	; 0x05
 1fa:	36 81       	ldd	r19, Z+6	; 0x06
 1fc:	f7 01       	movw	r30, r14
 1fe:	80 81       	ld	r24, Z
 200:	91 81       	ldd	r25, Z+1	; 0x01
 202:	28 17       	cp	r18, r24
 204:	39 07       	cpc	r19, r25
 206:	a1 f4       	brne	.+40     	; 0x230 <__vector_13+0xe2>
						cli();
 208:	f8 94       	cli
						timers[i].counter = 0;
 20a:	fe 01       	movw	r30, r28
 20c:	ee 0f       	add	r30, r30
 20e:	ff 1f       	adc	r31, r31
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	ee 0f       	add	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	e2 5f       	subi	r30, 0xF2	; 242
 21a:	fe 4f       	sbci	r31, 0xFE	; 254
 21c:	16 82       	std	Z+6, r1	; 0x06
 21e:	15 82       	std	Z+5, r1	; 0x05
						timers[0].running = 0;
 220:	f7 01       	movw	r30, r14
 222:	17 82       	std	Z+7, r1	; 0x07
						setEvent(timer_event[i]);
 224:	f8 01       	movw	r30, r16
 226:	80 81       	ld	r24, Z
 228:	91 81       	ldd	r25, Z+1	; 0x01
 22a:	0e 94 53 00 	call	0xa6	; 0xa6 <setEvent>
						sei();
 22e:	78 94       	sei
					}
					counter_intern = 0;
 230:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 234:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 238:	2a c0       	rjmp	.+84     	; 0x28e <__vector_13+0x140>
				}
			} else {
				timers[i].counter++;
 23a:	fe 01       	movw	r30, r28
 23c:	ee 0f       	add	r30, r30
 23e:	ff 1f       	adc	r31, r31
 240:	ee 0f       	add	r30, r30
 242:	ff 1f       	adc	r31, r31
 244:	ee 0f       	add	r30, r30
 246:	ff 1f       	adc	r31, r31
 248:	e2 5f       	subi	r30, 0xF2	; 242
 24a:	fe 4f       	sbci	r31, 0xFE	; 254
 24c:	85 81       	ldd	r24, Z+5	; 0x05
 24e:	96 81       	ldd	r25, Z+6	; 0x06
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	96 83       	std	Z+6, r25	; 0x06
 254:	85 83       	std	Z+5, r24	; 0x05
				if(timers[i].counter == timers[0].duration){
 256:	25 81       	ldd	r18, Z+5	; 0x05
 258:	36 81       	ldd	r19, Z+6	; 0x06
 25a:	f7 01       	movw	r30, r14
 25c:	80 81       	ld	r24, Z
 25e:	91 81       	ldd	r25, Z+1	; 0x01
 260:	28 17       	cp	r18, r24
 262:	39 07       	cpc	r19, r25
 264:	a1 f4       	brne	.+40     	; 0x28e <__vector_13+0x140>
					cli();
 266:	f8 94       	cli
					timers[i].counter = 0;
 268:	fe 01       	movw	r30, r28
 26a:	ee 0f       	add	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	ee 0f       	add	r30, r30
 274:	ff 1f       	adc	r31, r31
 276:	e2 5f       	subi	r30, 0xF2	; 242
 278:	fe 4f       	sbci	r31, 0xFE	; 254
 27a:	16 82       	std	Z+6, r1	; 0x06
 27c:	15 82       	std	Z+5, r1	; 0x05
					timers[0].running = 0;
 27e:	f7 01       	movw	r30, r14
 280:	17 82       	std	Z+7, r1	; 0x07
					setEvent(timer_event[i]);
 282:	f8 01       	movw	r30, r16
 284:	80 81       	ld	r24, Z
 286:	91 81       	ldd	r25, Z+1	; 0x01
 288:	0e 94 53 00 	call	0xa6	; 0xa6 <setEvent>
					sei();
 28c:	78 94       	sei
void cancelTimer(uint8_t t_n){
	timers[t_n].running = 0;
}

ISR(TIMER1_OVF_vect){
	for(int i = 0; i < 5; i++){
 28e:	21 96       	adiw	r28, 0x01	; 1
 290:	0e 5f       	subi	r16, 0xFE	; 254
 292:	1f 4f       	sbci	r17, 0xFF	; 255
 294:	c5 30       	cpi	r28, 0x05	; 5
 296:	d1 05       	cpc	r29, r1
 298:	09 f0       	breq	.+2      	; 0x29c <__vector_13+0x14e>
 29a:	7a cf       	rjmp	.-268    	; 0x190 <__vector_13+0x42>
					sei();
				}
			}
		}
	}
}
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	ff 90       	pop	r15
 2be:	ef 90       	pop	r14
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <main>:
	startTimer(1);
}

int main(void)
{
	PORTD |= (1<<PORTD0)|(1<<PORTD1)|(1<<PORTD2)|(1<<PORTD5);
 2ca:	8b b1       	in	r24, 0x0b	; 11
 2cc:	87 62       	ori	r24, 0x27	; 39
 2ce:	8b b9       	out	0x0b, r24	; 11
	PORTC |= 0x03;
 2d0:	88 b1       	in	r24, 0x08	; 8
 2d2:	83 60       	ori	r24, 0x03	; 3
 2d4:	88 b9       	out	0x08, r24	; 8
	helper = PORTB;
 2d6:	85 b1       	in	r24, 0x05	; 5
 2d8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <helper>
	PORTB |= 0x0F;
 2dc:	85 b1       	in	r24, 0x05	; 5
 2de:	8f 60       	ori	r24, 0x0F	; 15
 2e0:	85 b9       	out	0x05, r24	; 5
	DDRC = 0x02;	
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	87 b9       	out	0x07, r24	; 7
	DDRB = 0x0F;	
 2e6:	8f e0       	ldi	r24, 0x0F	; 15
 2e8:	84 b9       	out	0x04, r24	; 4
	TCCR1B &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
 2ea:	e1 e8       	ldi	r30, 0x81	; 129
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	88 7f       	andi	r24, 0xF8	; 248
 2f2:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);
 2f4:	80 81       	ld	r24, Z
 2f6:	82 60       	ori	r24, 0x02	; 2
 2f8:	80 83       	st	Z, r24
	TIMSK1 |= (1<<TOIE0);
 2fa:	ef e6       	ldi	r30, 0x6F	; 111
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	81 60       	ori	r24, 0x01	; 1
 302:	80 83       	st	Z, r24
	TCNT1 = 254;
 304:	8e ef       	ldi	r24, 0xFE	; 254
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 30c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	sei();
 310:	78 94       	sei
	safe = (PIND & 0x03);
 312:	89 b1       	in	r24, 0x09	; 9
 314:	83 70       	andi	r24, 0x03	; 3
 316:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <safe>
	safe |= ((PIND & 0x20) >> 3);
 31a:	89 b1       	in	r24, 0x09	; 9
 31c:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <safe>
 320:	80 72       	andi	r24, 0x20	; 32
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	95 95       	asr	r25
 326:	87 95       	ror	r24
 328:	95 95       	asr	r25
 32a:	87 95       	ror	r24
 32c:	95 95       	asr	r25
 32e:	87 95       	ror	r24
 330:	82 2b       	or	r24, r18
 332:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <safe>
	var = safe;
 336:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <safe>
 33a:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <var>
	declareTimer_milli(change_var, 1000, 0);
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	68 ee       	ldi	r22, 0xE8	; 232
 342:	73 e0       	ldi	r23, 0x03	; 3
 344:	82 e6       	ldi	r24, 0x62	; 98
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 93 00 	call	0x126	; 0x126 <declareTimer_milli>
	declareTimer_milli(check_buttons_and_overflow, 50, 1);
 34c:	41 e0       	ldi	r20, 0x01	; 1
 34e:	62 e3       	ldi	r22, 0x32	; 50
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	8a e6       	ldi	r24, 0x6A	; 106
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 93 00 	call	0x126	; 0x126 <declareTimer_milli>
	declareTimer(cb, d, t_n);
	timers[t_n].multiply = 0;
}

void startTimer(uint8_t t_n){
	timers[t_n].running = 1;
 35a:	ee e0       	ldi	r30, 0x0E	; 14
 35c:	f1 e0       	ldi	r31, 0x01	; 1
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	87 83       	std	Z+7, r24	; 0x07
 362:	87 87       	std	Z+15, r24	; 0x0f
			}
			clearEvent(RESET);
			safe = (PIND & 0x03);
			safe |= ((PIND & 0x20) >> 3);
			var = safe;
			PORTB = 0x07;
 364:	c7 e0       	ldi	r28, 0x07	; 7
	SREG = sreg_old;
	sei();
}

int eventIsSet(event_type ev){
	return (events&ev);
 366:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <events>
 36a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <events+0x1>
	startTimer(0);
	startTimer(1);
	
	while(1)
	{
		if(eventIsSet(START))
 36e:	81 ff       	sbrs	r24, 1
 370:	fa cf       	rjmp	.-12     	; 0x366 <main+0x9c>
		{		
			clearEvent(START);
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 82 00 	call	0x104	; 0x104 <clearEvent>
			while(!eventIsSet(RESET)){				
 37a:	2f c0       	rjmp	.+94     	; 0x3da <main+0x110>
 37c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <events>
 380:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <events+0x1>
				if(eventIsSet(VAR_CHANGED)){
 384:	83 ff       	sbrs	r24, 3
 386:	1b c0       	rjmp	.+54     	; 0x3be <main+0xf4>
					clearEvent(VAR_CHANGED);
 388:	88 e0       	ldi	r24, 0x08	; 8
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 82 00 	call	0x104	; 0x104 <clearEvent>
					helper &= 0xF8;
 390:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <helper>
 394:	88 7f       	andi	r24, 0xF8	; 248
 396:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <helper>
					helper |= var;
 39a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <var>
 39e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <helper>
 3a2:	89 2b       	or	r24, r25
 3a4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <helper>
					PORTB = helper;
 3a8:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <helper>
 3ac:	85 b9       	out	0x05, r24	; 5
					helper = PORTB;
 3ae:	85 b1       	in	r24, 0x05	; 5
 3b0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <helper>
					var++;
 3b4:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <var>
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <var>
 3be:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <events>
 3c2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <events+0x1>
				}
				if (eventIsSet(OVERFLOW)){
 3c6:	82 ff       	sbrs	r24, 2
 3c8:	08 c0       	rjmp	.+16     	; 0x3da <main+0x110>
					clearEvent(OVERFLOW);
 3ca:	84 e0       	ldi	r24, 0x04	; 4
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 82 00 	call	0x104	; 0x104 <clearEvent>
					var = safe;
 3d2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <safe>
 3d6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <var>
 3da:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <events>
 3de:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <events+0x1>
	while(1)
	{
		if(eventIsSet(START))
		{		
			clearEvent(START);
			while(!eventIsSet(RESET)){				
 3e2:	80 ff       	sbrs	r24, 0
 3e4:	cb cf       	rjmp	.-106    	; 0x37c <main+0xb2>
				if (eventIsSet(OVERFLOW)){
					clearEvent(OVERFLOW);
					var = safe;
				}
			}
			clearEvent(RESET);
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 82 00 	call	0x104	; 0x104 <clearEvent>
			safe = (PIND & 0x03);
 3ee:	89 b1       	in	r24, 0x09	; 9
 3f0:	83 70       	andi	r24, 0x03	; 3
 3f2:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <safe>
			safe |= ((PIND & 0x20) >> 3);
 3f6:	99 b1       	in	r25, 0x09	; 9
 3f8:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <safe>
 3fc:	90 72       	andi	r25, 0x20	; 32
 3fe:	89 2f       	mov	r24, r25
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	95 95       	asr	r25
 404:	87 95       	ror	r24
 406:	95 95       	asr	r25
 408:	87 95       	ror	r24
 40a:	95 95       	asr	r25
 40c:	87 95       	ror	r24
 40e:	82 2b       	or	r24, r18
 410:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <safe>
			var = safe;
 414:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <safe>
 418:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <var>
			PORTB = 0x07;
 41c:	c5 b9       	out	0x05, r28	; 5
 41e:	a3 cf       	rjmp	.-186    	; 0x366 <main+0x9c>

00000420 <_exit>:
 420:	f8 94       	cli

00000422 <__stop_program>:
 422:	ff cf       	rjmp	.-2      	; 0x422 <__stop_program>
