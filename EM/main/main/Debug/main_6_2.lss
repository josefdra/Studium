
main_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000d32  00000dc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000da  0080015c  0080015c  00000e22  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e22  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f0  00000000  00000000  00000efe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000285  00000000  00000000  000017ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000304  00000000  00000000  00001a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000020c  00000000  00000000  00001d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000289  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000085c  00000000  00000000  0000220d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002a69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 35       	cpi	r26, 0x5C	; 92
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac e5       	ldi	r26, 0x5C	; 92
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 33       	cpi	r26, 0x36	; 54
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 81 02 	call	0x502	; 0x502 <main>
  9e:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
uint8_t rxHead = 0;
uint8_t rxTail = 0;
uint8_t received_chars = 0;

void USART_Init(){
	UBRR0H = (BAUD_CONST >> 8);
  a6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUD_CONST;
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
  b0:	e1 ec       	ldi	r30, 0xC1	; 193
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 69       	ori	r24, 0x98	; 152
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <USART_Transmit>:
}

void USART_Transmit(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	95 ff       	sbrs	r25, 5
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <USART_Transmit+0x4>
	UDR0 = data;
  c6:	80 93 c6 00 	sts	0x00C6, r24
  ca:	08 95       	ret

000000cc <__vector_18>:
	}
	sei();
	return c;
}

ISR(USART_RX_vect){
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	4f 93       	push	r20
  dc:	5f 93       	push	r21
  de:	6f 93       	push	r22
  e0:	7f 93       	push	r23
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	af 93       	push	r26
  e8:	bf 93       	push	r27
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
	char receivedChar = UDR0;
  ee:	20 91 c6 00 	lds	r18, 0x00C6
	uint8_t nextHead = (rxHead + 1) % BUFFER_SIZE;
  f2:	80 91 5f 01 	lds	r24, 0x015F
  f6:	90 e0       	ldi	r25, 0x00	; 0
	ring_buffer[rxHead] = receivedChar;
  f8:	fc 01       	movw	r30, r24
  fa:	e0 5a       	subi	r30, 0xA0	; 160
  fc:	fe 4f       	sbci	r31, 0xFE	; 254
  fe:	20 83       	st	Z, r18
	return c;
}

ISR(USART_RX_vect){
	char receivedChar = UDR0;
	uint8_t nextHead = (rxHead + 1) % BUFFER_SIZE;
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	8f 71       	andi	r24, 0x1F	; 31
 104:	90 78       	andi	r25, 0x80	; 128
 106:	80 93 5f 01 	sts	0x015F, r24
	ring_buffer[rxHead] = receivedChar;
	rxHead = nextHead;
	received_chars++;
 10a:	80 91 5e 01 	lds	r24, 0x015E
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 5e 01 	sts	0x015E, r24
	if(received_chars == (BUFFER_SIZE - 8))
 114:	88 31       	cpi	r24, 0x18	; 24
 116:	19 f4       	brne	.+6      	; 0x11e <__vector_18+0x52>
		USART_Transmit(19); //XOFF
 118:	83 e1       	ldi	r24, 0x13	; 19
 11a:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
}
 11e:	ff 91       	pop	r31
 120:	ef 91       	pop	r30
 122:	bf 91       	pop	r27
 124:	af 91       	pop	r26
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	7f 91       	pop	r23
 12c:	6f 91       	pop	r22
 12e:	5f 91       	pop	r21
 130:	4f 91       	pop	r20
 132:	3f 91       	pop	r19
 134:	2f 91       	pop	r18
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <setCursorPosition>:
	USART_Transmit('[');
	USART_Transmit('2');
	USART_Transmit('J');
}

void setCursorPosition(int row, int col) {
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	7c 01       	movw	r14, r24
 14e:	8b 01       	movw	r16, r22
	USART_Transmit('\033');
 150:	8b e1       	ldi	r24, 0x1B	; 27
 152:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
	USART_Transmit('[');
 156:	8b e5       	ldi	r24, 0x5B	; 91
 158:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
	USART_Transmit(row / 10 + '0');
 15c:	ca e0       	ldi	r28, 0x0A	; 10
 15e:	d0 e0       	ldi	r29, 0x00	; 0
 160:	c7 01       	movw	r24, r14
 162:	be 01       	movw	r22, r28
 164:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__divmodhi4>
 168:	f8 2e       	mov	r15, r24
 16a:	80 e3       	ldi	r24, 0x30	; 48
 16c:	86 0f       	add	r24, r22
 16e:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
	USART_Transmit(row % 10 + '0');
 172:	80 e3       	ldi	r24, 0x30	; 48
 174:	8f 0d       	add	r24, r15
 176:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
	USART_Transmit(';');
 17a:	8b e3       	ldi	r24, 0x3B	; 59
 17c:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
	USART_Transmit(col / 10 + '0');
 180:	c8 01       	movw	r24, r16
 182:	be 01       	movw	r22, r28
 184:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__divmodhi4>
 188:	c8 2f       	mov	r28, r24
 18a:	80 e3       	ldi	r24, 0x30	; 48
 18c:	86 0f       	add	r24, r22
 18e:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
	USART_Transmit(col % 10 + '0');
 192:	80 e3       	ldi	r24, 0x30	; 48
 194:	8c 0f       	add	r24, r28
 196:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
	USART_Transmit('H');
 19a:	88 e4       	ldi	r24, 0x48	; 72
 19c:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	ff 90       	pop	r15
 1aa:	ef 90       	pop	r14
 1ac:	08 95       	ret

000001ae <temp>:

void temp(uint16_t var){
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
	var -= 289;
 1b2:	81 52       	subi	r24, 0x21	; 33
 1b4:	91 40       	sbci	r25, 0x01	; 1
	sprintf(c, "%d", var);
 1b6:	9f 93       	push	r25
 1b8:	8f 93       	push	r24
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	9f 93       	push	r25
 1c0:	8f 93       	push	r24
 1c2:	cc ed       	ldi	r28, 0xDC	; 220
 1c4:	d1 e0       	ldi	r29, 0x01	; 1
 1c6:	df 93       	push	r29
 1c8:	cf 93       	push	r28
 1ca:	0e 94 c6 03 	call	0x78c	; 0x78c <sprintf>
	for(int f=0; c[f] != '\0'; f++)
 1ce:	88 81       	ld	r24, Y
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	88 23       	and	r24, r24
 1de:	39 f0       	breq	.+14     	; 0x1ee <temp+0x40>
 1e0:	cd ed       	ldi	r28, 0xDD	; 221
 1e2:	d1 e0       	ldi	r29, 0x01	; 1
		USART_Transmit(c[f]);
 1e4:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
}

void temp(uint16_t var){
	var -= 289;
	sprintf(c, "%d", var);
	for(int f=0; c[f] != '\0'; f++)
 1e8:	89 91       	ld	r24, Y+
 1ea:	81 11       	cpse	r24, r1
 1ec:	fb cf       	rjmp	.-10     	; 0x1e4 <temp+0x36>
		USART_Transmit(c[f]);
	USART_Transmit('C');
 1ee:	83 e4       	ldi	r24, 0x43	; 67
 1f0:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <pot>:

void pot(uint16_t var){
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
	var *= 5;
 1fe:	9c 01       	movw	r18, r24
 200:	22 0f       	add	r18, r18
 202:	33 1f       	adc	r19, r19
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	82 0f       	add	r24, r18
 20a:	93 1f       	adc	r25, r19
	sprintf(c, "%d", var);
 20c:	9f 93       	push	r25
 20e:	8f 93       	push	r24
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	9f 93       	push	r25
 216:	8f 93       	push	r24
 218:	cc ed       	ldi	r28, 0xDC	; 220
 21a:	d1 e0       	ldi	r29, 0x01	; 1
 21c:	df 93       	push	r29
 21e:	cf 93       	push	r28
 220:	0e 94 c6 03 	call	0x78c	; 0x78c <sprintf>
	for(int f=0; c[f] != '\0'; f++)
 224:	88 81       	ld	r24, Y
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	88 23       	and	r24, r24
 234:	39 f0       	breq	.+14     	; 0x244 <pot+0x4a>
 236:	cd ed       	ldi	r28, 0xDD	; 221
 238:	d1 e0       	ldi	r29, 0x01	; 1
		USART_Transmit(c[f]);
 23a:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
}

void pot(uint16_t var){
	var *= 5;
	sprintf(c, "%d", var);
	for(int f=0; c[f] != '\0'; f++)
 23e:	89 91       	ld	r24, Y+
 240:	81 11       	cpse	r24, r1
 242:	fb cf       	rjmp	.-10     	; 0x23a <pot+0x40>
		USART_Transmit(c[f]);
	USART_Transmit('m');
 244:	8d e6       	ldi	r24, 0x6D	; 109
 246:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
	USART_Transmit('V');
 24a:	86 e5       	ldi	r24, 0x56	; 86
 24c:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <change_state>:

void change_state(){
	if(state == 0){
 256:	80 91 00 01 	lds	r24, 0x0100
 25a:	81 11       	cpse	r24, r1
 25c:	24 c0       	rjmp	.+72     	; 0x2a6 <change_state+0x50>
		state = 1;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 93 00 01 	sts	0x0100, r24
		ADMUX &= ~(1<<MUX0);
 264:	ec e7       	ldi	r30, 0x7C	; 124
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	8e 7f       	andi	r24, 0xFE	; 254
 26c:	80 83       	st	Z, r24
		ADMUX |= (1<<REFS1)|(1<<MUX3);
 26e:	80 81       	ld	r24, Z
 270:	88 68       	ori	r24, 0x88	; 136
 272:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 274:	8f e1       	ldi	r24, 0x1F	; 31
 276:	9e e4       	ldi	r25, 0x4E	; 78
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <change_state+0x22>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <change_state+0x28>
 27e:	00 00       	nop
		_delay_ms(5); 
		ADCSRA |= (1 << ADSC);
 280:	ea e7       	ldi	r30, 0x7A	; 122
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	80 64       	ori	r24, 0x40	; 64
 288:	80 83       	st	Z, r24
		while(ADCSRA & 0x40);
 28a:	80 81       	ld	r24, Z
 28c:	86 fd       	sbrc	r24, 6
 28e:	fd cf       	rjmp	.-6      	; 0x28a <change_state+0x34>
		adc = ADC;
 290:	80 91 78 00 	lds	r24, 0x0078
 294:	90 91 79 00 	lds	r25, 0x0079
 298:	90 93 db 01 	sts	0x01DB, r25
 29c:	80 93 da 01 	sts	0x01DA, r24
		temp(adc);
 2a0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <temp>
 2a4:	20 c0       	rjmp	.+64     	; 0x2e6 <change_state+0x90>
		} else{
		//state = 0;
		ADMUX &= ~((1<<REFS1)|(1<<MUX3));
 2a6:	ec e7       	ldi	r30, 0x7C	; 124
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	87 77       	andi	r24, 0x77	; 119
 2ae:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX0);
 2b0:	80 81       	ld	r24, Z
 2b2:	81 60       	ori	r24, 0x01	; 1
 2b4:	80 83       	st	Z, r24
 2b6:	8f e1       	ldi	r24, 0x1F	; 31
 2b8:	9e e4       	ldi	r25, 0x4E	; 78
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <change_state+0x64>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <change_state+0x6a>
 2c0:	00 00       	nop
		_delay_ms(5);
		ADCSRA |= (1 << ADSC);
 2c2:	ea e7       	ldi	r30, 0x7A	; 122
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	80 64       	ori	r24, 0x40	; 64
 2ca:	80 83       	st	Z, r24
		while(ADCSRA & 0x40);
 2cc:	80 81       	ld	r24, Z
 2ce:	86 fd       	sbrc	r24, 6
 2d0:	fd cf       	rjmp	.-6      	; 0x2cc <change_state+0x76>
		adc = ADC;
 2d2:	80 91 78 00 	lds	r24, 0x0078
 2d6:	90 91 79 00 	lds	r25, 0x0079
 2da:	90 93 db 01 	sts	0x01DB, r25
 2de:	80 93 da 01 	sts	0x01DA, r24
		pot(adc);
 2e2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <pot>
	}
	USART_Transmit('\n');
 2e6:	8a e0       	ldi	r24, 0x0A	; 10
 2e8:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
 2ec:	08 95       	ret

000002ee <led_control>:
}

void led_control(){	
	output = ADC;
 2ee:	20 91 78 00 	lds	r18, 0x0078
 2f2:	30 91 79 00 	lds	r19, 0x0079
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	20 93 82 01 	sts	0x0182, r18
 2fe:	30 93 83 01 	sts	0x0183, r19
 302:	40 93 84 01 	sts	0x0184, r20
 306:	50 93 85 01 	sts	0x0185, r21
	dutyCycle = (((output * 1000) / 1023) * 255) / 1000;
 30a:	a8 ee       	ldi	r26, 0xE8	; 232
 30c:	b3 e0       	ldi	r27, 0x03	; 3
 30e:	0e 94 98 03 	call	0x730	; 0x730 <__muluhisi3>
 312:	2f ef       	ldi	r18, 0xFF	; 255
 314:	33 e0       	ldi	r19, 0x03	; 3
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	50 e0       	ldi	r21, 0x00	; 0
 31a:	0e 94 76 03 	call	0x6ec	; 0x6ec <__udivmodsi4>
 31e:	af ef       	ldi	r26, 0xFF	; 255
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	0e 94 98 03 	call	0x730	; 0x730 <__muluhisi3>
 326:	28 ee       	ldi	r18, 0xE8	; 232
 328:	33 e0       	ldi	r19, 0x03	; 3
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	0e 94 76 03 	call	0x6ec	; 0x6ec <__udivmodsi4>
 332:	20 93 80 01 	sts	0x0180, r18
 336:	30 93 81 01 	sts	0x0181, r19
	OCR0B = dutyCycle;
 33a:	28 bd       	out	0x28, r18	; 40
 33c:	08 95       	ret

0000033e <duty>:
}

void duty(){
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
	sprintf(c, "%d", duty_percentage);
 342:	80 91 2c 02 	lds	r24, 0x022C
 346:	1f 92       	push	r1
 348:	8f 93       	push	r24
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	9f 93       	push	r25
 350:	8f 93       	push	r24
 352:	cc ed       	ldi	r28, 0xDC	; 220
 354:	d1 e0       	ldi	r29, 0x01	; 1
 356:	df 93       	push	r29
 358:	cf 93       	push	r28
 35a:	0e 94 c6 03 	call	0x78c	; 0x78c <sprintf>
	for(int f=0; c[f] != '\0'; f++)
 35e:	88 81       	ld	r24, Y
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	88 23       	and	r24, r24
 36e:	39 f0       	breq	.+14     	; 0x37e <duty+0x40>
 370:	cd ed       	ldi	r28, 0xDD	; 221
 372:	d1 e0       	ldi	r29, 0x01	; 1
		USART_Transmit(c[f]);
 374:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
	OCR0B = dutyCycle;
}

void duty(){
	sprintf(c, "%d", duty_percentage);
	for(int f=0; c[f] != '\0'; f++)
 378:	89 91       	ld	r24, Y+
 37a:	81 11       	cpse	r24, r1
 37c:	fb cf       	rjmp	.-10     	; 0x374 <duty+0x36>
		USART_Transmit(c[f]);
	USART_Transmit('%');
 37e:	85 e2       	ldi	r24, 0x25	; 37
 380:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
}
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <__vector_10>:

ISR(TIMER1_CAPT_vect){ 
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	2f 93       	push	r18
 396:	3f 93       	push	r19
 398:	4f 93       	push	r20
 39a:	5f 93       	push	r21
 39c:	6f 93       	push	r22
 39e:	7f 93       	push	r23
 3a0:	8f 93       	push	r24
 3a2:	9f 93       	push	r25
 3a4:	af 93       	push	r26
 3a6:	bf 93       	push	r27
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	ef 93       	push	r30
 3ae:	ff 93       	push	r31
	if (TCCR1B & (1<<ICES1)){
 3b0:	80 91 81 00 	lds	r24, 0x0081
 3b4:	86 ff       	sbrs	r24, 6
 3b6:	09 c0       	rjmp	.+18     	; 0x3ca <__vector_10+0x40>
		icrr = ICR1;
 3b8:	80 91 86 00 	lds	r24, 0x0086
 3bc:	90 91 87 00 	lds	r25, 0x0087
 3c0:	90 93 2f 02 	sts	0x022F, r25
 3c4:	80 93 2e 02 	sts	0x022E, r24
 3c8:	83 c0       	rjmp	.+262    	; 0x4d0 <__vector_10+0x146>
	} else {
		icrf = ICR1;
 3ca:	80 91 86 00 	lds	r24, 0x0086
 3ce:	90 91 87 00 	lds	r25, 0x0087
 3d2:	90 93 31 02 	sts	0x0231, r25
 3d6:	80 93 30 02 	sts	0x0230, r24
		if (icrr < icrf){
 3da:	c0 91 2e 02 	lds	r28, 0x022E
 3de:	d0 91 2f 02 	lds	r29, 0x022F
 3e2:	c8 17       	cp	r28, r24
 3e4:	d9 07       	cpc	r29, r25
 3e6:	68 f4       	brcc	.+26     	; 0x402 <__vector_10+0x78>
			icrd = icrf - icrr;
 3e8:	8c 1b       	sub	r24, r28
 3ea:	9d 0b       	sbc	r25, r29
 3ec:	a0 e0       	ldi	r26, 0x00	; 0
 3ee:	b0 e0       	ldi	r27, 0x00	; 0
 3f0:	80 93 86 01 	sts	0x0186, r24
 3f4:	90 93 87 01 	sts	0x0187, r25
 3f8:	a0 93 88 01 	sts	0x0188, r26
 3fc:	b0 93 89 01 	sts	0x0189, r27
 400:	0d c0       	rjmp	.+26     	; 0x41c <__vector_10+0x92>
			} else {
			icrd = (0xFFFF - icrr) + icrf;
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	8c 1b       	sub	r24, r28
 406:	9d 0b       	sbc	r25, r29
 408:	a0 e0       	ldi	r26, 0x00	; 0
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	80 93 86 01 	sts	0x0186, r24
 410:	90 93 87 01 	sts	0x0187, r25
 414:	a0 93 88 01 	sts	0x0188, r26
 418:	b0 93 89 01 	sts	0x0189, r27
		}
		if (icrro < icrr){
 41c:	20 91 5c 01 	lds	r18, 0x015C
 420:	30 91 5d 01 	lds	r19, 0x015D
 424:	2c 17       	cp	r18, r28
 426:	3d 07       	cpc	r19, r29
 428:	70 f4       	brcc	.+28     	; 0x446 <__vector_10+0xbc>
			icrc = icrr - icrro;
 42a:	ce 01       	movw	r24, r28
 42c:	82 1b       	sub	r24, r18
 42e:	93 0b       	sbc	r25, r19
 430:	a0 e0       	ldi	r26, 0x00	; 0
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	80 93 32 02 	sts	0x0232, r24
 438:	90 93 33 02 	sts	0x0233, r25
 43c:	a0 93 34 02 	sts	0x0234, r26
 440:	b0 93 35 02 	sts	0x0235, r27
 444:	0e c0       	rjmp	.+28     	; 0x462 <__vector_10+0xd8>
			} else {
			icrc = (0xFFFF - icrro) + icrr;
 446:	ce 01       	movw	r24, r28
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	82 1b       	sub	r24, r18
 44c:	93 0b       	sbc	r25, r19
 44e:	a0 e0       	ldi	r26, 0x00	; 0
 450:	b0 e0       	ldi	r27, 0x00	; 0
 452:	80 93 32 02 	sts	0x0232, r24
 456:	90 93 33 02 	sts	0x0233, r25
 45a:	a0 93 34 02 	sts	0x0234, r26
 45e:	b0 93 35 02 	sts	0x0235, r27
		}
		if (icrc == 500){
 462:	80 91 32 02 	lds	r24, 0x0232
 466:	90 91 33 02 	lds	r25, 0x0233
 46a:	a0 91 34 02 	lds	r26, 0x0234
 46e:	b0 91 35 02 	lds	r27, 0x0235
 472:	84 3f       	cpi	r24, 0xF4	; 244
 474:	91 40       	sbci	r25, 0x01	; 1
 476:	a1 05       	cpc	r26, r1
 478:	b1 05       	cpc	r27, r1
 47a:	61 f4       	brne	.+24     	; 0x494 <__vector_10+0x10a>
			icrc = 250;
 47c:	8a ef       	ldi	r24, 0xFA	; 250
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	a0 e0       	ldi	r26, 0x00	; 0
 482:	b0 e0       	ldi	r27, 0x00	; 0
 484:	80 93 32 02 	sts	0x0232, r24
 488:	90 93 33 02 	sts	0x0233, r25
 48c:	a0 93 34 02 	sts	0x0234, r26
 490:	b0 93 35 02 	sts	0x0235, r27
		}
		duty_percentage = 100 - ((icrd * 100) / icrc);
 494:	20 91 86 01 	lds	r18, 0x0186
 498:	30 91 87 01 	lds	r19, 0x0187
 49c:	40 91 88 01 	lds	r20, 0x0188
 4a0:	50 91 89 01 	lds	r21, 0x0189
 4a4:	a4 e6       	ldi	r26, 0x64	; 100
 4a6:	b0 e0       	ldi	r27, 0x00	; 0
 4a8:	0e 94 98 03 	call	0x730	; 0x730 <__muluhisi3>
 4ac:	20 91 32 02 	lds	r18, 0x0232
 4b0:	30 91 33 02 	lds	r19, 0x0233
 4b4:	40 91 34 02 	lds	r20, 0x0234
 4b8:	50 91 35 02 	lds	r21, 0x0235
 4bc:	0e 94 76 03 	call	0x6ec	; 0x6ec <__udivmodsi4>
 4c0:	84 e6       	ldi	r24, 0x64	; 100
 4c2:	82 1b       	sub	r24, r18
 4c4:	80 93 2c 02 	sts	0x022C, r24
		icrro = icrr;
 4c8:	d0 93 5d 01 	sts	0x015D, r29
 4cc:	c0 93 5c 01 	sts	0x015C, r28
	}
	TCCR1B ^= (1<<ICES1);
 4d0:	e1 e8       	ldi	r30, 0x81	; 129
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	90 81       	ld	r25, Z
 4d6:	80 e4       	ldi	r24, 0x40	; 64
 4d8:	89 27       	eor	r24, r25
 4da:	80 83       	st	Z, r24
}
 4dc:	ff 91       	pop	r31
 4de:	ef 91       	pop	r30
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	bf 91       	pop	r27
 4e6:	af 91       	pop	r26
 4e8:	9f 91       	pop	r25
 4ea:	8f 91       	pop	r24
 4ec:	7f 91       	pop	r23
 4ee:	6f 91       	pop	r22
 4f0:	5f 91       	pop	r21
 4f2:	4f 91       	pop	r20
 4f4:	3f 91       	pop	r19
 4f6:	2f 91       	pop	r18
 4f8:	0f 90       	pop	r0
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	0f 90       	pop	r0
 4fe:	1f 90       	pop	r1
 500:	18 95       	reti

00000502 <main>:

int main(void)
{
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	cd b7       	in	r28, 0x3d	; 61
 508:	de b7       	in	r29, 0x3e	; 62
 50a:	c7 55       	subi	r28, 0x57	; 87
 50c:	d1 09       	sbc	r29, r1
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	f8 94       	cli
 512:	de bf       	out	0x3e, r29	; 62
 514:	0f be       	out	0x3f, r0	; 63
 516:	cd bf       	out	0x3d, r28	; 61
 518:	ea e8       	ldi	r30, 0x8A	; 138
 51a:	f1 e0       	ldi	r31, 0x01	; 1
 51c:	8a ed       	ldi	r24, 0xDA	; 218
 51e:	91 e0       	ldi	r25, 0x01	; 1
	for(int i = 0; i < 80; i++){
		l[i] = ' ';
 520:	20 e2       	ldi	r18, 0x20	; 32
 522:	21 93       	st	Z+, r18
	TCCR1B ^= (1<<ICES1);
}

int main(void)
{
	for(int i = 0; i < 80; i++){
 524:	e8 17       	cp	r30, r24
 526:	f9 07       	cpc	r31, r25
 528:	e1 f7       	brne	.-8      	; 0x522 <main+0x20>
		l[i] = ' ';
	}
	TCCR0A |= (1<<WGM00)|(1<<WGM01)|(1<<COM0B1)|(1<<COM0B0); 
 52a:	84 b5       	in	r24, 0x24	; 36
 52c:	83 63       	ori	r24, 0x33	; 51
 52e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02)|(1<<CS01)|(1<<CS00);
 530:	85 b5       	in	r24, 0x25	; 37
 532:	8b 60       	ori	r24, 0x0B	; 11
 534:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249; 
 536:	89 ef       	ldi	r24, 0xF9	; 249
 538:	87 bd       	out	0x27, r24	; 39
	TCCR1B |= (1<<CS11)|(1<<CS10);
 53a:	e1 e8       	ldi	r30, 0x81	; 129
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	83 60       	ori	r24, 0x03	; 3
 542:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<ICES1);
 544:	80 81       	ld	r24, Z
 546:	8f 7b       	andi	r24, 0xBF	; 191
 548:	80 83       	st	Z, r24
	TIMSK1 |= (1<<ICIE1); 
 54a:	ef e6       	ldi	r30, 0x6F	; 111
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	80 62       	ori	r24, 0x20	; 32
 552:	80 83       	st	Z, r24
	sei();
 554:	78 94       	sei
	PRR &= ~(1<<PRADC);
 556:	e4 e6       	ldi	r30, 0x64	; 100
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	8e 7f       	andi	r24, 0xFE	; 254
 55e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1)| (1<<ADPS0);
 560:	ea e7       	ldi	r30, 0x7A	; 122
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 81       	ld	r24, Z
 566:	87 68       	ori	r24, 0x87	; 135
 568:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS1)|(1<<REFS0)|(1<<MUX3);
 56a:	ec e7       	ldi	r30, 0x7C	; 124
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	80 81       	ld	r24, Z
 570:	88 6c       	ori	r24, 0xC8	; 200
 572:	80 83       	st	Z, r24
	DDRD = (1<<PORTD5);
 574:	80 e2       	ldi	r24, 0x20	; 32
 576:	8a b9       	out	0x0a, r24	; 10
	USART_Init();
 578:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	const char start[] = "Wir haben diese Werte:\n";
 57c:	88 e1       	ldi	r24, 0x18	; 24
 57e:	e4 e0       	ldi	r30, 0x04	; 4
 580:	f1 e0       	ldi	r31, 0x01	; 1
 582:	de 01       	movw	r26, r28
 584:	11 96       	adiw	r26, 0x01	; 1
 586:	01 90       	ld	r0, Z+
 588:	0d 92       	st	X+, r0
 58a:	8a 95       	dec	r24
 58c:	e1 f7       	brne	.-8      	; 0x586 <main+0x84>
	const char thermo[] = "Thermometer: ";
 58e:	8e e0       	ldi	r24, 0x0E	; 14
 590:	ec e1       	ldi	r30, 0x1C	; 28
 592:	f1 e0       	ldi	r31, 0x01	; 1
 594:	de 01       	movw	r26, r28
 596:	59 96       	adiw	r26, 0x19	; 25
 598:	01 90       	ld	r0, Z+
 59a:	0d 92       	st	X+, r0
 59c:	8a 95       	dec	r24
 59e:	e1 f7       	brne	.-8      	; 0x598 <main+0x96>
	const char pote[] = "Potentiometer: ";
 5a0:	80 e1       	ldi	r24, 0x10	; 16
 5a2:	ea e2       	ldi	r30, 0x2A	; 42
 5a4:	f1 e0       	ldi	r31, 0x01	; 1
 5a6:	de 01       	movw	r26, r28
 5a8:	97 96       	adiw	r26, 0x27	; 39
 5aa:	01 90       	ld	r0, Z+
 5ac:	0d 92       	st	X+, r0
 5ae:	8a 95       	dec	r24
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <main+0xa8>
	const char duty_text[] = "Wir haben einen Duty Cycle von: ";
 5b2:	81 e2       	ldi	r24, 0x21	; 33
 5b4:	ea e3       	ldi	r30, 0x3A	; 58
 5b6:	f1 e0       	ldi	r31, 0x01	; 1
 5b8:	de 01       	movw	r26, r28
 5ba:	d7 96       	adiw	r26, 0x37	; 55
 5bc:	01 90       	ld	r0, Z+
 5be:	0d 92       	st	X+, r0
 5c0:	8a 95       	dec	r24
 5c2:	e1 f7       	brne	.-8      	; 0x5bc <main+0xba>
			USART_Transmit(pote[f]);		
		change_state();		
		for(int f=0; duty_text[f] != '\0'; f++)
			USART_Transmit(duty_text[f]);		
		duty();
		for(int f=0; l[f] != '\0'; f++)
 5c4:	0f 2e       	mov	r0, r31
 5c6:	fa e8       	ldi	r31, 0x8A	; 138
 5c8:	cf 2e       	mov	r12, r31
 5ca:	f1 e0       	ldi	r31, 0x01	; 1
 5cc:	df 2e       	mov	r13, r31
 5ce:	f0 2d       	mov	r31, r0
 5d0:	0f 2e       	mov	r0, r31
 5d2:	fb e8       	ldi	r31, 0x8B	; 139
 5d4:	ef 2e       	mov	r14, r31
 5d6:	f1 e0       	ldi	r31, 0x01	; 1
 5d8:	ff 2e       	mov	r15, r31
 5da:	f0 2d       	mov	r31, r0
	const char thermo[] = "Thermometer: ";
	const char pote[] = "Potentiometer: ";
	const char duty_text[] = "Wir haben einen Duty Cycle von: ";
	while(1)
	{		
		setCursorPosition(4,32);
 5dc:	60 e2       	ldi	r22, 0x20	; 32
 5de:	70 e0       	ldi	r23, 0x00	; 0
 5e0:	84 e0       	ldi	r24, 0x04	; 4
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 94 a0 00 	call	0x140	; 0x140 <setCursorPosition>
		USART_Transmit(' ');
 5e8:	80 e2       	ldi	r24, 0x20	; 32
 5ea:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
		USART_Transmit(' ');
 5ee:	80 e2       	ldi	r24, 0x20	; 32
 5f0:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
		USART_Transmit(' ');
 5f4:	80 e2       	ldi	r24, 0x20	; 32
 5f6:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
		USART_Transmit(' ');
 5fa:	80 e2       	ldi	r24, 0x20	; 32
 5fc:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
		USART_Transmit(' ');
 600:	80 e2       	ldi	r24, 0x20	; 32
 602:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
		USART_Transmit(' ');
 606:	80 e2       	ldi	r24, 0x20	; 32
 608:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
		USART_Transmit(' ');
 60c:	80 e2       	ldi	r24, 0x20	; 32
 60e:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
		USART_Transmit(' ');
 612:	80 e2       	ldi	r24, 0x20	; 32
 614:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
		USART_Transmit(' ');
 618:	80 e2       	ldi	r24, 0x20	; 32
 61a:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
		USART_Transmit(' ');
 61e:	80 e2       	ldi	r24, 0x20	; 32
 620:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
		led_control(); 
 624:	0e 94 77 01 	call	0x2ee	; 0x2ee <led_control>
		setCursorPosition(1, 1);		
 628:	61 e0       	ldi	r22, 0x01	; 1
 62a:	70 e0       	ldi	r23, 0x00	; 0
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 a0 00 	call	0x140	; 0x140 <setCursorPosition>
		for(int f=0; start[f] != '\0'; f++)
 634:	89 81       	ldd	r24, Y+1	; 0x01
 636:	88 23       	and	r24, r24
 638:	51 f0       	breq	.+20     	; 0x64e <main+0x14c>
 63a:	8e 01       	movw	r16, r28
 63c:	0e 5f       	subi	r16, 0xFE	; 254
 63e:	1f 4f       	sbci	r17, 0xFF	; 255
			USART_Transmit(start[f]);
 640:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
		USART_Transmit(' ');
		USART_Transmit(' ');
		USART_Transmit(' ');
		led_control(); 
		setCursorPosition(1, 1);		
		for(int f=0; start[f] != '\0'; f++)
 644:	f8 01       	movw	r30, r16
 646:	81 91       	ld	r24, Z+
 648:	8f 01       	movw	r16, r30
 64a:	81 11       	cpse	r24, r1
 64c:	f9 cf       	rjmp	.-14     	; 0x640 <main+0x13e>
			USART_Transmit(start[f]);
		for(int f=0; thermo[f] != '\0'; f++)
 64e:	89 8d       	ldd	r24, Y+25	; 0x19
 650:	88 23       	and	r24, r24
 652:	51 f0       	breq	.+20     	; 0x668 <main+0x166>
 654:	8e 01       	movw	r16, r28
 656:	06 5e       	subi	r16, 0xE6	; 230
 658:	1f 4f       	sbci	r17, 0xFF	; 255
			USART_Transmit(thermo[f]);		
 65a:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
		USART_Transmit(' ');
		led_control(); 
		setCursorPosition(1, 1);		
		for(int f=0; start[f] != '\0'; f++)
			USART_Transmit(start[f]);
		for(int f=0; thermo[f] != '\0'; f++)
 65e:	f8 01       	movw	r30, r16
 660:	81 91       	ld	r24, Z+
 662:	8f 01       	movw	r16, r30
 664:	81 11       	cpse	r24, r1
 666:	f9 cf       	rjmp	.-14     	; 0x65a <main+0x158>
			USART_Transmit(thermo[f]);		
		change_state();		
 668:	0e 94 2b 01 	call	0x256	; 0x256 <change_state>
		for(int f=0; pote[f] != '\0'; f++)
 66c:	8f a1       	ldd	r24, Y+39	; 0x27
 66e:	88 23       	and	r24, r24
 670:	51 f0       	breq	.+20     	; 0x686 <main+0x184>
 672:	8e 01       	movw	r16, r28
 674:	08 5d       	subi	r16, 0xD8	; 216
 676:	1f 4f       	sbci	r17, 0xFF	; 255
			USART_Transmit(pote[f]);		
 678:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
		for(int f=0; start[f] != '\0'; f++)
			USART_Transmit(start[f]);
		for(int f=0; thermo[f] != '\0'; f++)
			USART_Transmit(thermo[f]);		
		change_state();		
		for(int f=0; pote[f] != '\0'; f++)
 67c:	f8 01       	movw	r30, r16
 67e:	81 91       	ld	r24, Z+
 680:	8f 01       	movw	r16, r30
 682:	81 11       	cpse	r24, r1
 684:	f9 cf       	rjmp	.-14     	; 0x678 <main+0x176>
			USART_Transmit(pote[f]);		
		change_state();		
 686:	0e 94 2b 01 	call	0x256	; 0x256 <change_state>
		for(int f=0; duty_text[f] != '\0'; f++)
 68a:	8f a9       	ldd	r24, Y+55	; 0x37
 68c:	88 23       	and	r24, r24
 68e:	51 f0       	breq	.+20     	; 0x6a4 <main+0x1a2>
 690:	8e 01       	movw	r16, r28
 692:	08 5c       	subi	r16, 0xC8	; 200
 694:	1f 4f       	sbci	r17, 0xFF	; 255
			USART_Transmit(duty_text[f]);		
 696:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
			USART_Transmit(thermo[f]);		
		change_state();		
		for(int f=0; pote[f] != '\0'; f++)
			USART_Transmit(pote[f]);		
		change_state();		
		for(int f=0; duty_text[f] != '\0'; f++)
 69a:	f8 01       	movw	r30, r16
 69c:	81 91       	ld	r24, Z+
 69e:	8f 01       	movw	r16, r30
 6a0:	81 11       	cpse	r24, r1
 6a2:	f9 cf       	rjmp	.-14     	; 0x696 <main+0x194>
			USART_Transmit(duty_text[f]);		
		duty();
 6a4:	0e 94 9f 01 	call	0x33e	; 0x33e <duty>
		for(int f=0; l[f] != '\0'; f++)
 6a8:	f6 01       	movw	r30, r12
 6aa:	80 81       	ld	r24, Z
 6ac:	88 23       	and	r24, r24
 6ae:	09 f4       	brne	.+2      	; 0x6b2 <main+0x1b0>
 6b0:	95 cf       	rjmp	.-214    	; 0x5dc <main+0xda>
 6b2:	87 01       	movw	r16, r14
			USART_Transmit(l[f]);
 6b4:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
			USART_Transmit(pote[f]);		
		change_state();		
		for(int f=0; duty_text[f] != '\0'; f++)
			USART_Transmit(duty_text[f]);		
		duty();
		for(int f=0; l[f] != '\0'; f++)
 6b8:	f8 01       	movw	r30, r16
 6ba:	81 91       	ld	r24, Z+
 6bc:	8f 01       	movw	r16, r30
 6be:	81 11       	cpse	r24, r1
 6c0:	f9 cf       	rjmp	.-14     	; 0x6b4 <main+0x1b2>
 6c2:	8c cf       	rjmp	.-232    	; 0x5dc <main+0xda>

000006c4 <__divmodhi4>:
 6c4:	97 fb       	bst	r25, 7
 6c6:	07 2e       	mov	r0, r23
 6c8:	16 f4       	brtc	.+4      	; 0x6ce <__divmodhi4+0xa>
 6ca:	00 94       	com	r0
 6cc:	07 d0       	rcall	.+14     	; 0x6dc <__divmodhi4_neg1>
 6ce:	77 fd       	sbrc	r23, 7
 6d0:	09 d0       	rcall	.+18     	; 0x6e4 <__divmodhi4_neg2>
 6d2:	0e 94 a3 03 	call	0x746	; 0x746 <__udivmodhi4>
 6d6:	07 fc       	sbrc	r0, 7
 6d8:	05 d0       	rcall	.+10     	; 0x6e4 <__divmodhi4_neg2>
 6da:	3e f4       	brtc	.+14     	; 0x6ea <__divmodhi4_exit>

000006dc <__divmodhi4_neg1>:
 6dc:	90 95       	com	r25
 6de:	81 95       	neg	r24
 6e0:	9f 4f       	sbci	r25, 0xFF	; 255
 6e2:	08 95       	ret

000006e4 <__divmodhi4_neg2>:
 6e4:	70 95       	com	r23
 6e6:	61 95       	neg	r22
 6e8:	7f 4f       	sbci	r23, 0xFF	; 255

000006ea <__divmodhi4_exit>:
 6ea:	08 95       	ret

000006ec <__udivmodsi4>:
 6ec:	a1 e2       	ldi	r26, 0x21	; 33
 6ee:	1a 2e       	mov	r1, r26
 6f0:	aa 1b       	sub	r26, r26
 6f2:	bb 1b       	sub	r27, r27
 6f4:	fd 01       	movw	r30, r26
 6f6:	0d c0       	rjmp	.+26     	; 0x712 <__udivmodsi4_ep>

000006f8 <__udivmodsi4_loop>:
 6f8:	aa 1f       	adc	r26, r26
 6fa:	bb 1f       	adc	r27, r27
 6fc:	ee 1f       	adc	r30, r30
 6fe:	ff 1f       	adc	r31, r31
 700:	a2 17       	cp	r26, r18
 702:	b3 07       	cpc	r27, r19
 704:	e4 07       	cpc	r30, r20
 706:	f5 07       	cpc	r31, r21
 708:	20 f0       	brcs	.+8      	; 0x712 <__udivmodsi4_ep>
 70a:	a2 1b       	sub	r26, r18
 70c:	b3 0b       	sbc	r27, r19
 70e:	e4 0b       	sbc	r30, r20
 710:	f5 0b       	sbc	r31, r21

00000712 <__udivmodsi4_ep>:
 712:	66 1f       	adc	r22, r22
 714:	77 1f       	adc	r23, r23
 716:	88 1f       	adc	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	1a 94       	dec	r1
 71c:	69 f7       	brne	.-38     	; 0x6f8 <__udivmodsi4_loop>
 71e:	60 95       	com	r22
 720:	70 95       	com	r23
 722:	80 95       	com	r24
 724:	90 95       	com	r25
 726:	9b 01       	movw	r18, r22
 728:	ac 01       	movw	r20, r24
 72a:	bd 01       	movw	r22, r26
 72c:	cf 01       	movw	r24, r30
 72e:	08 95       	ret

00000730 <__muluhisi3>:
 730:	0e 94 b7 03 	call	0x76e	; 0x76e <__umulhisi3>
 734:	a5 9f       	mul	r26, r21
 736:	90 0d       	add	r25, r0
 738:	b4 9f       	mul	r27, r20
 73a:	90 0d       	add	r25, r0
 73c:	a4 9f       	mul	r26, r20
 73e:	80 0d       	add	r24, r0
 740:	91 1d       	adc	r25, r1
 742:	11 24       	eor	r1, r1
 744:	08 95       	ret

00000746 <__udivmodhi4>:
 746:	aa 1b       	sub	r26, r26
 748:	bb 1b       	sub	r27, r27
 74a:	51 e1       	ldi	r21, 0x11	; 17
 74c:	07 c0       	rjmp	.+14     	; 0x75c <__udivmodhi4_ep>

0000074e <__udivmodhi4_loop>:
 74e:	aa 1f       	adc	r26, r26
 750:	bb 1f       	adc	r27, r27
 752:	a6 17       	cp	r26, r22
 754:	b7 07       	cpc	r27, r23
 756:	10 f0       	brcs	.+4      	; 0x75c <__udivmodhi4_ep>
 758:	a6 1b       	sub	r26, r22
 75a:	b7 0b       	sbc	r27, r23

0000075c <__udivmodhi4_ep>:
 75c:	88 1f       	adc	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	5a 95       	dec	r21
 762:	a9 f7       	brne	.-22     	; 0x74e <__udivmodhi4_loop>
 764:	80 95       	com	r24
 766:	90 95       	com	r25
 768:	bc 01       	movw	r22, r24
 76a:	cd 01       	movw	r24, r26
 76c:	08 95       	ret

0000076e <__umulhisi3>:
 76e:	a2 9f       	mul	r26, r18
 770:	b0 01       	movw	r22, r0
 772:	b3 9f       	mul	r27, r19
 774:	c0 01       	movw	r24, r0
 776:	a3 9f       	mul	r26, r19
 778:	70 0d       	add	r23, r0
 77a:	81 1d       	adc	r24, r1
 77c:	11 24       	eor	r1, r1
 77e:	91 1d       	adc	r25, r1
 780:	b2 9f       	mul	r27, r18
 782:	70 0d       	add	r23, r0
 784:	81 1d       	adc	r24, r1
 786:	11 24       	eor	r1, r1
 788:	91 1d       	adc	r25, r1
 78a:	08 95       	ret

0000078c <sprintf>:
 78c:	ae e0       	ldi	r26, 0x0E	; 14
 78e:	b0 e0       	ldi	r27, 0x00	; 0
 790:	ec ec       	ldi	r30, 0xCC	; 204
 792:	f3 e0       	ldi	r31, 0x03	; 3
 794:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__prologue_saves__+0x1c>
 798:	0d 89       	ldd	r16, Y+21	; 0x15
 79a:	1e 89       	ldd	r17, Y+22	; 0x16
 79c:	86 e0       	ldi	r24, 0x06	; 6
 79e:	8c 83       	std	Y+4, r24	; 0x04
 7a0:	1a 83       	std	Y+2, r17	; 0x02
 7a2:	09 83       	std	Y+1, r16	; 0x01
 7a4:	8f ef       	ldi	r24, 0xFF	; 255
 7a6:	9f e7       	ldi	r25, 0x7F	; 127
 7a8:	9e 83       	std	Y+6, r25	; 0x06
 7aa:	8d 83       	std	Y+5, r24	; 0x05
 7ac:	ae 01       	movw	r20, r28
 7ae:	47 5e       	subi	r20, 0xE7	; 231
 7b0:	5f 4f       	sbci	r21, 0xFF	; 255
 7b2:	6f 89       	ldd	r22, Y+23	; 0x17
 7b4:	78 8d       	ldd	r23, Y+24	; 0x18
 7b6:	ce 01       	movw	r24, r28
 7b8:	01 96       	adiw	r24, 0x01	; 1
 7ba:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <vfprintf>
 7be:	ef 81       	ldd	r30, Y+7	; 0x07
 7c0:	f8 85       	ldd	r31, Y+8	; 0x08
 7c2:	e0 0f       	add	r30, r16
 7c4:	f1 1f       	adc	r31, r17
 7c6:	10 82       	st	Z, r1
 7c8:	2e 96       	adiw	r28, 0x0e	; 14
 7ca:	e4 e0       	ldi	r30, 0x04	; 4
 7cc:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__epilogue_restores__+0x1c>

000007d0 <vfprintf>:
 7d0:	ac e0       	ldi	r26, 0x0C	; 12
 7d2:	b0 e0       	ldi	r27, 0x00	; 0
 7d4:	ee ee       	ldi	r30, 0xEE	; 238
 7d6:	f3 e0       	ldi	r31, 0x03	; 3
 7d8:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__prologue_saves__>
 7dc:	7c 01       	movw	r14, r24
 7de:	6b 01       	movw	r12, r22
 7e0:	8a 01       	movw	r16, r20
 7e2:	fc 01       	movw	r30, r24
 7e4:	17 82       	std	Z+7, r1	; 0x07
 7e6:	16 82       	std	Z+6, r1	; 0x06
 7e8:	83 81       	ldd	r24, Z+3	; 0x03
 7ea:	81 ff       	sbrs	r24, 1
 7ec:	bd c1       	rjmp	.+890    	; 0xb68 <__stack+0x269>
 7ee:	ce 01       	movw	r24, r28
 7f0:	01 96       	adiw	r24, 0x01	; 1
 7f2:	4c 01       	movw	r8, r24
 7f4:	f7 01       	movw	r30, r14
 7f6:	93 81       	ldd	r25, Z+3	; 0x03
 7f8:	f6 01       	movw	r30, r12
 7fa:	93 fd       	sbrc	r25, 3
 7fc:	85 91       	lpm	r24, Z+
 7fe:	93 ff       	sbrs	r25, 3
 800:	81 91       	ld	r24, Z+
 802:	6f 01       	movw	r12, r30
 804:	88 23       	and	r24, r24
 806:	09 f4       	brne	.+2      	; 0x80a <vfprintf+0x3a>
 808:	ab c1       	rjmp	.+854    	; 0xb60 <__stack+0x261>
 80a:	85 32       	cpi	r24, 0x25	; 37
 80c:	39 f4       	brne	.+14     	; 0x81c <vfprintf+0x4c>
 80e:	93 fd       	sbrc	r25, 3
 810:	85 91       	lpm	r24, Z+
 812:	93 ff       	sbrs	r25, 3
 814:	81 91       	ld	r24, Z+
 816:	6f 01       	movw	r12, r30
 818:	85 32       	cpi	r24, 0x25	; 37
 81a:	29 f4       	brne	.+10     	; 0x826 <vfprintf+0x56>
 81c:	b7 01       	movw	r22, r14
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 d0 05 	call	0xba0	; 0xba0 <fputc>
 824:	e7 cf       	rjmp	.-50     	; 0x7f4 <vfprintf+0x24>
 826:	51 2c       	mov	r5, r1
 828:	31 2c       	mov	r3, r1
 82a:	20 e0       	ldi	r18, 0x00	; 0
 82c:	20 32       	cpi	r18, 0x20	; 32
 82e:	a0 f4       	brcc	.+40     	; 0x858 <vfprintf+0x88>
 830:	8b 32       	cpi	r24, 0x2B	; 43
 832:	69 f0       	breq	.+26     	; 0x84e <vfprintf+0x7e>
 834:	30 f4       	brcc	.+12     	; 0x842 <vfprintf+0x72>
 836:	80 32       	cpi	r24, 0x20	; 32
 838:	59 f0       	breq	.+22     	; 0x850 <vfprintf+0x80>
 83a:	83 32       	cpi	r24, 0x23	; 35
 83c:	69 f4       	brne	.+26     	; 0x858 <vfprintf+0x88>
 83e:	20 61       	ori	r18, 0x10	; 16
 840:	2c c0       	rjmp	.+88     	; 0x89a <vfprintf+0xca>
 842:	8d 32       	cpi	r24, 0x2D	; 45
 844:	39 f0       	breq	.+14     	; 0x854 <vfprintf+0x84>
 846:	80 33       	cpi	r24, 0x30	; 48
 848:	39 f4       	brne	.+14     	; 0x858 <vfprintf+0x88>
 84a:	21 60       	ori	r18, 0x01	; 1
 84c:	26 c0       	rjmp	.+76     	; 0x89a <vfprintf+0xca>
 84e:	22 60       	ori	r18, 0x02	; 2
 850:	24 60       	ori	r18, 0x04	; 4
 852:	23 c0       	rjmp	.+70     	; 0x89a <vfprintf+0xca>
 854:	28 60       	ori	r18, 0x08	; 8
 856:	21 c0       	rjmp	.+66     	; 0x89a <vfprintf+0xca>
 858:	27 fd       	sbrc	r18, 7
 85a:	27 c0       	rjmp	.+78     	; 0x8aa <vfprintf+0xda>
 85c:	30 ed       	ldi	r19, 0xD0	; 208
 85e:	38 0f       	add	r19, r24
 860:	3a 30       	cpi	r19, 0x0A	; 10
 862:	78 f4       	brcc	.+30     	; 0x882 <vfprintf+0xb2>
 864:	26 ff       	sbrs	r18, 6
 866:	06 c0       	rjmp	.+12     	; 0x874 <vfprintf+0xa4>
 868:	fa e0       	ldi	r31, 0x0A	; 10
 86a:	5f 9e       	mul	r5, r31
 86c:	30 0d       	add	r19, r0
 86e:	11 24       	eor	r1, r1
 870:	53 2e       	mov	r5, r19
 872:	13 c0       	rjmp	.+38     	; 0x89a <vfprintf+0xca>
 874:	8a e0       	ldi	r24, 0x0A	; 10
 876:	38 9e       	mul	r3, r24
 878:	30 0d       	add	r19, r0
 87a:	11 24       	eor	r1, r1
 87c:	33 2e       	mov	r3, r19
 87e:	20 62       	ori	r18, 0x20	; 32
 880:	0c c0       	rjmp	.+24     	; 0x89a <vfprintf+0xca>
 882:	8e 32       	cpi	r24, 0x2E	; 46
 884:	21 f4       	brne	.+8      	; 0x88e <vfprintf+0xbe>
 886:	26 fd       	sbrc	r18, 6
 888:	6b c1       	rjmp	.+726    	; 0xb60 <__stack+0x261>
 88a:	20 64       	ori	r18, 0x40	; 64
 88c:	06 c0       	rjmp	.+12     	; 0x89a <vfprintf+0xca>
 88e:	8c 36       	cpi	r24, 0x6C	; 108
 890:	11 f4       	brne	.+4      	; 0x896 <vfprintf+0xc6>
 892:	20 68       	ori	r18, 0x80	; 128
 894:	02 c0       	rjmp	.+4      	; 0x89a <vfprintf+0xca>
 896:	88 36       	cpi	r24, 0x68	; 104
 898:	41 f4       	brne	.+16     	; 0x8aa <vfprintf+0xda>
 89a:	f6 01       	movw	r30, r12
 89c:	93 fd       	sbrc	r25, 3
 89e:	85 91       	lpm	r24, Z+
 8a0:	93 ff       	sbrs	r25, 3
 8a2:	81 91       	ld	r24, Z+
 8a4:	6f 01       	movw	r12, r30
 8a6:	81 11       	cpse	r24, r1
 8a8:	c1 cf       	rjmp	.-126    	; 0x82c <vfprintf+0x5c>
 8aa:	98 2f       	mov	r25, r24
 8ac:	9f 7d       	andi	r25, 0xDF	; 223
 8ae:	95 54       	subi	r25, 0x45	; 69
 8b0:	93 30       	cpi	r25, 0x03	; 3
 8b2:	28 f4       	brcc	.+10     	; 0x8be <vfprintf+0xee>
 8b4:	0c 5f       	subi	r16, 0xFC	; 252
 8b6:	1f 4f       	sbci	r17, 0xFF	; 255
 8b8:	ff e3       	ldi	r31, 0x3F	; 63
 8ba:	f9 83       	std	Y+1, r31	; 0x01
 8bc:	0d c0       	rjmp	.+26     	; 0x8d8 <vfprintf+0x108>
 8be:	83 36       	cpi	r24, 0x63	; 99
 8c0:	31 f0       	breq	.+12     	; 0x8ce <vfprintf+0xfe>
 8c2:	83 37       	cpi	r24, 0x73	; 115
 8c4:	71 f0       	breq	.+28     	; 0x8e2 <vfprintf+0x112>
 8c6:	83 35       	cpi	r24, 0x53	; 83
 8c8:	09 f0       	breq	.+2      	; 0x8cc <vfprintf+0xfc>
 8ca:	5b c0       	rjmp	.+182    	; 0x982 <__stack+0x83>
 8cc:	22 c0       	rjmp	.+68     	; 0x912 <__stack+0x13>
 8ce:	f8 01       	movw	r30, r16
 8d0:	80 81       	ld	r24, Z
 8d2:	89 83       	std	Y+1, r24	; 0x01
 8d4:	0e 5f       	subi	r16, 0xFE	; 254
 8d6:	1f 4f       	sbci	r17, 0xFF	; 255
 8d8:	44 24       	eor	r4, r4
 8da:	43 94       	inc	r4
 8dc:	51 2c       	mov	r5, r1
 8de:	54 01       	movw	r10, r8
 8e0:	15 c0       	rjmp	.+42     	; 0x90c <__stack+0xd>
 8e2:	38 01       	movw	r6, r16
 8e4:	f2 e0       	ldi	r31, 0x02	; 2
 8e6:	6f 0e       	add	r6, r31
 8e8:	71 1c       	adc	r7, r1
 8ea:	f8 01       	movw	r30, r16
 8ec:	a0 80       	ld	r10, Z
 8ee:	b1 80       	ldd	r11, Z+1	; 0x01
 8f0:	26 ff       	sbrs	r18, 6
 8f2:	03 c0       	rjmp	.+6      	; 0x8fa <vfprintf+0x12a>
 8f4:	65 2d       	mov	r22, r5
 8f6:	70 e0       	ldi	r23, 0x00	; 0
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <vfprintf+0x12e>
 8fa:	6f ef       	ldi	r22, 0xFF	; 255
 8fc:	7f ef       	ldi	r23, 0xFF	; 255
 8fe:	c5 01       	movw	r24, r10
 900:	2c 87       	std	Y+12, r18	; 0x0c
 902:	0e 94 c5 05 	call	0xb8a	; 0xb8a <strnlen>
 906:	2c 01       	movw	r4, r24
 908:	83 01       	movw	r16, r6
 90a:	2c 85       	ldd	r18, Y+12	; 0x0c
 90c:	2f 77       	andi	r18, 0x7F	; 127
 90e:	22 2e       	mov	r2, r18
 910:	17 c0       	rjmp	.+46     	; 0x940 <__stack+0x41>
 912:	38 01       	movw	r6, r16
 914:	f2 e0       	ldi	r31, 0x02	; 2
 916:	6f 0e       	add	r6, r31
 918:	71 1c       	adc	r7, r1
 91a:	f8 01       	movw	r30, r16
 91c:	a0 80       	ld	r10, Z
 91e:	b1 80       	ldd	r11, Z+1	; 0x01
 920:	26 ff       	sbrs	r18, 6
 922:	03 c0       	rjmp	.+6      	; 0x92a <__stack+0x2b>
 924:	65 2d       	mov	r22, r5
 926:	70 e0       	ldi	r23, 0x00	; 0
 928:	02 c0       	rjmp	.+4      	; 0x92e <__stack+0x2f>
 92a:	6f ef       	ldi	r22, 0xFF	; 255
 92c:	7f ef       	ldi	r23, 0xFF	; 255
 92e:	c5 01       	movw	r24, r10
 930:	2c 87       	std	Y+12, r18	; 0x0c
 932:	0e 94 ba 05 	call	0xb74	; 0xb74 <strnlen_P>
 936:	2c 01       	movw	r4, r24
 938:	2c 85       	ldd	r18, Y+12	; 0x0c
 93a:	20 68       	ori	r18, 0x80	; 128
 93c:	22 2e       	mov	r2, r18
 93e:	83 01       	movw	r16, r6
 940:	23 fc       	sbrc	r2, 3
 942:	1b c0       	rjmp	.+54     	; 0x97a <__stack+0x7b>
 944:	83 2d       	mov	r24, r3
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	48 16       	cp	r4, r24
 94a:	59 06       	cpc	r5, r25
 94c:	b0 f4       	brcc	.+44     	; 0x97a <__stack+0x7b>
 94e:	b7 01       	movw	r22, r14
 950:	80 e2       	ldi	r24, 0x20	; 32
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	0e 94 d0 05 	call	0xba0	; 0xba0 <fputc>
 958:	3a 94       	dec	r3
 95a:	f4 cf       	rjmp	.-24     	; 0x944 <__stack+0x45>
 95c:	f5 01       	movw	r30, r10
 95e:	27 fc       	sbrc	r2, 7
 960:	85 91       	lpm	r24, Z+
 962:	27 fe       	sbrs	r2, 7
 964:	81 91       	ld	r24, Z+
 966:	5f 01       	movw	r10, r30
 968:	b7 01       	movw	r22, r14
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	0e 94 d0 05 	call	0xba0	; 0xba0 <fputc>
 970:	31 10       	cpse	r3, r1
 972:	3a 94       	dec	r3
 974:	f1 e0       	ldi	r31, 0x01	; 1
 976:	4f 1a       	sub	r4, r31
 978:	51 08       	sbc	r5, r1
 97a:	41 14       	cp	r4, r1
 97c:	51 04       	cpc	r5, r1
 97e:	71 f7       	brne	.-36     	; 0x95c <__stack+0x5d>
 980:	e5 c0       	rjmp	.+458    	; 0xb4c <__stack+0x24d>
 982:	84 36       	cpi	r24, 0x64	; 100
 984:	11 f0       	breq	.+4      	; 0x98a <__stack+0x8b>
 986:	89 36       	cpi	r24, 0x69	; 105
 988:	39 f5       	brne	.+78     	; 0x9d8 <__stack+0xd9>
 98a:	f8 01       	movw	r30, r16
 98c:	27 ff       	sbrs	r18, 7
 98e:	07 c0       	rjmp	.+14     	; 0x99e <__stack+0x9f>
 990:	60 81       	ld	r22, Z
 992:	71 81       	ldd	r23, Z+1	; 0x01
 994:	82 81       	ldd	r24, Z+2	; 0x02
 996:	93 81       	ldd	r25, Z+3	; 0x03
 998:	0c 5f       	subi	r16, 0xFC	; 252
 99a:	1f 4f       	sbci	r17, 0xFF	; 255
 99c:	08 c0       	rjmp	.+16     	; 0x9ae <__stack+0xaf>
 99e:	60 81       	ld	r22, Z
 9a0:	71 81       	ldd	r23, Z+1	; 0x01
 9a2:	88 27       	eor	r24, r24
 9a4:	77 fd       	sbrc	r23, 7
 9a6:	80 95       	com	r24
 9a8:	98 2f       	mov	r25, r24
 9aa:	0e 5f       	subi	r16, 0xFE	; 254
 9ac:	1f 4f       	sbci	r17, 0xFF	; 255
 9ae:	2f 76       	andi	r18, 0x6F	; 111
 9b0:	b2 2e       	mov	r11, r18
 9b2:	97 ff       	sbrs	r25, 7
 9b4:	09 c0       	rjmp	.+18     	; 0x9c8 <__stack+0xc9>
 9b6:	90 95       	com	r25
 9b8:	80 95       	com	r24
 9ba:	70 95       	com	r23
 9bc:	61 95       	neg	r22
 9be:	7f 4f       	sbci	r23, 0xFF	; 255
 9c0:	8f 4f       	sbci	r24, 0xFF	; 255
 9c2:	9f 4f       	sbci	r25, 0xFF	; 255
 9c4:	20 68       	ori	r18, 0x80	; 128
 9c6:	b2 2e       	mov	r11, r18
 9c8:	2a e0       	ldi	r18, 0x0A	; 10
 9ca:	30 e0       	ldi	r19, 0x00	; 0
 9cc:	a4 01       	movw	r20, r8
 9ce:	0e 94 02 06 	call	0xc04	; 0xc04 <__ultoa_invert>
 9d2:	a8 2e       	mov	r10, r24
 9d4:	a8 18       	sub	r10, r8
 9d6:	44 c0       	rjmp	.+136    	; 0xa60 <__stack+0x161>
 9d8:	85 37       	cpi	r24, 0x75	; 117
 9da:	29 f4       	brne	.+10     	; 0x9e6 <__stack+0xe7>
 9dc:	2f 7e       	andi	r18, 0xEF	; 239
 9de:	b2 2e       	mov	r11, r18
 9e0:	2a e0       	ldi	r18, 0x0A	; 10
 9e2:	30 e0       	ldi	r19, 0x00	; 0
 9e4:	25 c0       	rjmp	.+74     	; 0xa30 <__stack+0x131>
 9e6:	f2 2f       	mov	r31, r18
 9e8:	f9 7f       	andi	r31, 0xF9	; 249
 9ea:	bf 2e       	mov	r11, r31
 9ec:	8f 36       	cpi	r24, 0x6F	; 111
 9ee:	c1 f0       	breq	.+48     	; 0xa20 <__stack+0x121>
 9f0:	18 f4       	brcc	.+6      	; 0x9f8 <__stack+0xf9>
 9f2:	88 35       	cpi	r24, 0x58	; 88
 9f4:	79 f0       	breq	.+30     	; 0xa14 <__stack+0x115>
 9f6:	b4 c0       	rjmp	.+360    	; 0xb60 <__stack+0x261>
 9f8:	80 37       	cpi	r24, 0x70	; 112
 9fa:	19 f0       	breq	.+6      	; 0xa02 <__stack+0x103>
 9fc:	88 37       	cpi	r24, 0x78	; 120
 9fe:	21 f0       	breq	.+8      	; 0xa08 <__stack+0x109>
 a00:	af c0       	rjmp	.+350    	; 0xb60 <__stack+0x261>
 a02:	2f 2f       	mov	r18, r31
 a04:	20 61       	ori	r18, 0x10	; 16
 a06:	b2 2e       	mov	r11, r18
 a08:	b4 fe       	sbrs	r11, 4
 a0a:	0d c0       	rjmp	.+26     	; 0xa26 <__stack+0x127>
 a0c:	8b 2d       	mov	r24, r11
 a0e:	84 60       	ori	r24, 0x04	; 4
 a10:	b8 2e       	mov	r11, r24
 a12:	09 c0       	rjmp	.+18     	; 0xa26 <__stack+0x127>
 a14:	24 ff       	sbrs	r18, 4
 a16:	0a c0       	rjmp	.+20     	; 0xa2c <__stack+0x12d>
 a18:	9f 2f       	mov	r25, r31
 a1a:	96 60       	ori	r25, 0x06	; 6
 a1c:	b9 2e       	mov	r11, r25
 a1e:	06 c0       	rjmp	.+12     	; 0xa2c <__stack+0x12d>
 a20:	28 e0       	ldi	r18, 0x08	; 8
 a22:	30 e0       	ldi	r19, 0x00	; 0
 a24:	05 c0       	rjmp	.+10     	; 0xa30 <__stack+0x131>
 a26:	20 e1       	ldi	r18, 0x10	; 16
 a28:	30 e0       	ldi	r19, 0x00	; 0
 a2a:	02 c0       	rjmp	.+4      	; 0xa30 <__stack+0x131>
 a2c:	20 e1       	ldi	r18, 0x10	; 16
 a2e:	32 e0       	ldi	r19, 0x02	; 2
 a30:	f8 01       	movw	r30, r16
 a32:	b7 fe       	sbrs	r11, 7
 a34:	07 c0       	rjmp	.+14     	; 0xa44 <__stack+0x145>
 a36:	60 81       	ld	r22, Z
 a38:	71 81       	ldd	r23, Z+1	; 0x01
 a3a:	82 81       	ldd	r24, Z+2	; 0x02
 a3c:	93 81       	ldd	r25, Z+3	; 0x03
 a3e:	0c 5f       	subi	r16, 0xFC	; 252
 a40:	1f 4f       	sbci	r17, 0xFF	; 255
 a42:	06 c0       	rjmp	.+12     	; 0xa50 <__stack+0x151>
 a44:	60 81       	ld	r22, Z
 a46:	71 81       	ldd	r23, Z+1	; 0x01
 a48:	80 e0       	ldi	r24, 0x00	; 0
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	0e 5f       	subi	r16, 0xFE	; 254
 a4e:	1f 4f       	sbci	r17, 0xFF	; 255
 a50:	a4 01       	movw	r20, r8
 a52:	0e 94 02 06 	call	0xc04	; 0xc04 <__ultoa_invert>
 a56:	a8 2e       	mov	r10, r24
 a58:	a8 18       	sub	r10, r8
 a5a:	fb 2d       	mov	r31, r11
 a5c:	ff 77       	andi	r31, 0x7F	; 127
 a5e:	bf 2e       	mov	r11, r31
 a60:	b6 fe       	sbrs	r11, 6
 a62:	0b c0       	rjmp	.+22     	; 0xa7a <__stack+0x17b>
 a64:	2b 2d       	mov	r18, r11
 a66:	2e 7f       	andi	r18, 0xFE	; 254
 a68:	a5 14       	cp	r10, r5
 a6a:	50 f4       	brcc	.+20     	; 0xa80 <__stack+0x181>
 a6c:	b4 fe       	sbrs	r11, 4
 a6e:	0a c0       	rjmp	.+20     	; 0xa84 <__stack+0x185>
 a70:	b2 fc       	sbrc	r11, 2
 a72:	08 c0       	rjmp	.+16     	; 0xa84 <__stack+0x185>
 a74:	2b 2d       	mov	r18, r11
 a76:	2e 7e       	andi	r18, 0xEE	; 238
 a78:	05 c0       	rjmp	.+10     	; 0xa84 <__stack+0x185>
 a7a:	7a 2c       	mov	r7, r10
 a7c:	2b 2d       	mov	r18, r11
 a7e:	03 c0       	rjmp	.+6      	; 0xa86 <__stack+0x187>
 a80:	7a 2c       	mov	r7, r10
 a82:	01 c0       	rjmp	.+2      	; 0xa86 <__stack+0x187>
 a84:	75 2c       	mov	r7, r5
 a86:	24 ff       	sbrs	r18, 4
 a88:	0d c0       	rjmp	.+26     	; 0xaa4 <__stack+0x1a5>
 a8a:	fe 01       	movw	r30, r28
 a8c:	ea 0d       	add	r30, r10
 a8e:	f1 1d       	adc	r31, r1
 a90:	80 81       	ld	r24, Z
 a92:	80 33       	cpi	r24, 0x30	; 48
 a94:	11 f4       	brne	.+4      	; 0xa9a <__stack+0x19b>
 a96:	29 7e       	andi	r18, 0xE9	; 233
 a98:	09 c0       	rjmp	.+18     	; 0xaac <__stack+0x1ad>
 a9a:	22 ff       	sbrs	r18, 2
 a9c:	06 c0       	rjmp	.+12     	; 0xaaa <__stack+0x1ab>
 a9e:	73 94       	inc	r7
 aa0:	73 94       	inc	r7
 aa2:	04 c0       	rjmp	.+8      	; 0xaac <__stack+0x1ad>
 aa4:	82 2f       	mov	r24, r18
 aa6:	86 78       	andi	r24, 0x86	; 134
 aa8:	09 f0       	breq	.+2      	; 0xaac <__stack+0x1ad>
 aaa:	73 94       	inc	r7
 aac:	23 fd       	sbrc	r18, 3
 aae:	13 c0       	rjmp	.+38     	; 0xad6 <__stack+0x1d7>
 ab0:	20 ff       	sbrs	r18, 0
 ab2:	06 c0       	rjmp	.+12     	; 0xac0 <__stack+0x1c1>
 ab4:	5a 2c       	mov	r5, r10
 ab6:	73 14       	cp	r7, r3
 ab8:	18 f4       	brcc	.+6      	; 0xac0 <__stack+0x1c1>
 aba:	53 0c       	add	r5, r3
 abc:	57 18       	sub	r5, r7
 abe:	73 2c       	mov	r7, r3
 ac0:	73 14       	cp	r7, r3
 ac2:	68 f4       	brcc	.+26     	; 0xade <__stack+0x1df>
 ac4:	b7 01       	movw	r22, r14
 ac6:	80 e2       	ldi	r24, 0x20	; 32
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	2c 87       	std	Y+12, r18	; 0x0c
 acc:	0e 94 d0 05 	call	0xba0	; 0xba0 <fputc>
 ad0:	73 94       	inc	r7
 ad2:	2c 85       	ldd	r18, Y+12	; 0x0c
 ad4:	f5 cf       	rjmp	.-22     	; 0xac0 <__stack+0x1c1>
 ad6:	73 14       	cp	r7, r3
 ad8:	10 f4       	brcc	.+4      	; 0xade <__stack+0x1df>
 ada:	37 18       	sub	r3, r7
 adc:	01 c0       	rjmp	.+2      	; 0xae0 <__stack+0x1e1>
 ade:	31 2c       	mov	r3, r1
 ae0:	24 ff       	sbrs	r18, 4
 ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__stack+0x209>
 ae4:	b7 01       	movw	r22, r14
 ae6:	80 e3       	ldi	r24, 0x30	; 48
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	2c 87       	std	Y+12, r18	; 0x0c
 aec:	0e 94 d0 05 	call	0xba0	; 0xba0 <fputc>
 af0:	2c 85       	ldd	r18, Y+12	; 0x0c
 af2:	22 ff       	sbrs	r18, 2
 af4:	17 c0       	rjmp	.+46     	; 0xb24 <__stack+0x225>
 af6:	21 ff       	sbrs	r18, 1
 af8:	03 c0       	rjmp	.+6      	; 0xb00 <__stack+0x201>
 afa:	88 e5       	ldi	r24, 0x58	; 88
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	02 c0       	rjmp	.+4      	; 0xb04 <__stack+0x205>
 b00:	88 e7       	ldi	r24, 0x78	; 120
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	b7 01       	movw	r22, r14
 b06:	0c c0       	rjmp	.+24     	; 0xb20 <__stack+0x221>
 b08:	82 2f       	mov	r24, r18
 b0a:	86 78       	andi	r24, 0x86	; 134
 b0c:	59 f0       	breq	.+22     	; 0xb24 <__stack+0x225>
 b0e:	21 fd       	sbrc	r18, 1
 b10:	02 c0       	rjmp	.+4      	; 0xb16 <__stack+0x217>
 b12:	80 e2       	ldi	r24, 0x20	; 32
 b14:	01 c0       	rjmp	.+2      	; 0xb18 <__stack+0x219>
 b16:	8b e2       	ldi	r24, 0x2B	; 43
 b18:	27 fd       	sbrc	r18, 7
 b1a:	8d e2       	ldi	r24, 0x2D	; 45
 b1c:	b7 01       	movw	r22, r14
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	0e 94 d0 05 	call	0xba0	; 0xba0 <fputc>
 b24:	a5 14       	cp	r10, r5
 b26:	38 f4       	brcc	.+14     	; 0xb36 <__stack+0x237>
 b28:	b7 01       	movw	r22, r14
 b2a:	80 e3       	ldi	r24, 0x30	; 48
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	0e 94 d0 05 	call	0xba0	; 0xba0 <fputc>
 b32:	5a 94       	dec	r5
 b34:	f7 cf       	rjmp	.-18     	; 0xb24 <__stack+0x225>
 b36:	aa 94       	dec	r10
 b38:	f4 01       	movw	r30, r8
 b3a:	ea 0d       	add	r30, r10
 b3c:	f1 1d       	adc	r31, r1
 b3e:	80 81       	ld	r24, Z
 b40:	b7 01       	movw	r22, r14
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	0e 94 d0 05 	call	0xba0	; 0xba0 <fputc>
 b48:	a1 10       	cpse	r10, r1
 b4a:	f5 cf       	rjmp	.-22     	; 0xb36 <__stack+0x237>
 b4c:	33 20       	and	r3, r3
 b4e:	09 f4       	brne	.+2      	; 0xb52 <__stack+0x253>
 b50:	51 ce       	rjmp	.-862    	; 0x7f4 <vfprintf+0x24>
 b52:	b7 01       	movw	r22, r14
 b54:	80 e2       	ldi	r24, 0x20	; 32
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	0e 94 d0 05 	call	0xba0	; 0xba0 <fputc>
 b5c:	3a 94       	dec	r3
 b5e:	f6 cf       	rjmp	.-20     	; 0xb4c <__stack+0x24d>
 b60:	f7 01       	movw	r30, r14
 b62:	86 81       	ldd	r24, Z+6	; 0x06
 b64:	97 81       	ldd	r25, Z+7	; 0x07
 b66:	02 c0       	rjmp	.+4      	; 0xb6c <__stack+0x26d>
 b68:	8f ef       	ldi	r24, 0xFF	; 255
 b6a:	9f ef       	ldi	r25, 0xFF	; 255
 b6c:	2c 96       	adiw	r28, 0x0c	; 12
 b6e:	e2 e1       	ldi	r30, 0x12	; 18
 b70:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__epilogue_restores__>

00000b74 <strnlen_P>:
 b74:	fc 01       	movw	r30, r24
 b76:	05 90       	lpm	r0, Z+
 b78:	61 50       	subi	r22, 0x01	; 1
 b7a:	70 40       	sbci	r23, 0x00	; 0
 b7c:	01 10       	cpse	r0, r1
 b7e:	d8 f7       	brcc	.-10     	; 0xb76 <strnlen_P+0x2>
 b80:	80 95       	com	r24
 b82:	90 95       	com	r25
 b84:	8e 0f       	add	r24, r30
 b86:	9f 1f       	adc	r25, r31
 b88:	08 95       	ret

00000b8a <strnlen>:
 b8a:	fc 01       	movw	r30, r24
 b8c:	61 50       	subi	r22, 0x01	; 1
 b8e:	70 40       	sbci	r23, 0x00	; 0
 b90:	01 90       	ld	r0, Z+
 b92:	01 10       	cpse	r0, r1
 b94:	d8 f7       	brcc	.-10     	; 0xb8c <strnlen+0x2>
 b96:	80 95       	com	r24
 b98:	90 95       	com	r25
 b9a:	8e 0f       	add	r24, r30
 b9c:	9f 1f       	adc	r25, r31
 b9e:	08 95       	ret

00000ba0 <fputc>:
 ba0:	0f 93       	push	r16
 ba2:	1f 93       	push	r17
 ba4:	cf 93       	push	r28
 ba6:	df 93       	push	r29
 ba8:	18 2f       	mov	r17, r24
 baa:	09 2f       	mov	r16, r25
 bac:	eb 01       	movw	r28, r22
 bae:	8b 81       	ldd	r24, Y+3	; 0x03
 bb0:	81 fd       	sbrc	r24, 1
 bb2:	03 c0       	rjmp	.+6      	; 0xbba <fputc+0x1a>
 bb4:	8f ef       	ldi	r24, 0xFF	; 255
 bb6:	9f ef       	ldi	r25, 0xFF	; 255
 bb8:	20 c0       	rjmp	.+64     	; 0xbfa <fputc+0x5a>
 bba:	82 ff       	sbrs	r24, 2
 bbc:	10 c0       	rjmp	.+32     	; 0xbde <fputc+0x3e>
 bbe:	4e 81       	ldd	r20, Y+6	; 0x06
 bc0:	5f 81       	ldd	r21, Y+7	; 0x07
 bc2:	2c 81       	ldd	r18, Y+4	; 0x04
 bc4:	3d 81       	ldd	r19, Y+5	; 0x05
 bc6:	42 17       	cp	r20, r18
 bc8:	53 07       	cpc	r21, r19
 bca:	7c f4       	brge	.+30     	; 0xbea <fputc+0x4a>
 bcc:	e8 81       	ld	r30, Y
 bce:	f9 81       	ldd	r31, Y+1	; 0x01
 bd0:	9f 01       	movw	r18, r30
 bd2:	2f 5f       	subi	r18, 0xFF	; 255
 bd4:	3f 4f       	sbci	r19, 0xFF	; 255
 bd6:	39 83       	std	Y+1, r19	; 0x01
 bd8:	28 83       	st	Y, r18
 bda:	10 83       	st	Z, r17
 bdc:	06 c0       	rjmp	.+12     	; 0xbea <fputc+0x4a>
 bde:	e8 85       	ldd	r30, Y+8	; 0x08
 be0:	f9 85       	ldd	r31, Y+9	; 0x09
 be2:	81 2f       	mov	r24, r17
 be4:	09 95       	icall
 be6:	89 2b       	or	r24, r25
 be8:	29 f7       	brne	.-54     	; 0xbb4 <fputc+0x14>
 bea:	2e 81       	ldd	r18, Y+6	; 0x06
 bec:	3f 81       	ldd	r19, Y+7	; 0x07
 bee:	2f 5f       	subi	r18, 0xFF	; 255
 bf0:	3f 4f       	sbci	r19, 0xFF	; 255
 bf2:	3f 83       	std	Y+7, r19	; 0x07
 bf4:	2e 83       	std	Y+6, r18	; 0x06
 bf6:	81 2f       	mov	r24, r17
 bf8:	90 2f       	mov	r25, r16
 bfa:	df 91       	pop	r29
 bfc:	cf 91       	pop	r28
 bfe:	1f 91       	pop	r17
 c00:	0f 91       	pop	r16
 c02:	08 95       	ret

00000c04 <__ultoa_invert>:
 c04:	fa 01       	movw	r30, r20
 c06:	aa 27       	eor	r26, r26
 c08:	28 30       	cpi	r18, 0x08	; 8
 c0a:	51 f1       	breq	.+84     	; 0xc60 <__ultoa_invert+0x5c>
 c0c:	20 31       	cpi	r18, 0x10	; 16
 c0e:	81 f1       	breq	.+96     	; 0xc70 <__ultoa_invert+0x6c>
 c10:	e8 94       	clt
 c12:	6f 93       	push	r22
 c14:	6e 7f       	andi	r22, 0xFE	; 254
 c16:	6e 5f       	subi	r22, 0xFE	; 254
 c18:	7f 4f       	sbci	r23, 0xFF	; 255
 c1a:	8f 4f       	sbci	r24, 0xFF	; 255
 c1c:	9f 4f       	sbci	r25, 0xFF	; 255
 c1e:	af 4f       	sbci	r26, 0xFF	; 255
 c20:	b1 e0       	ldi	r27, 0x01	; 1
 c22:	3e d0       	rcall	.+124    	; 0xca0 <__ultoa_invert+0x9c>
 c24:	b4 e0       	ldi	r27, 0x04	; 4
 c26:	3c d0       	rcall	.+120    	; 0xca0 <__ultoa_invert+0x9c>
 c28:	67 0f       	add	r22, r23
 c2a:	78 1f       	adc	r23, r24
 c2c:	89 1f       	adc	r24, r25
 c2e:	9a 1f       	adc	r25, r26
 c30:	a1 1d       	adc	r26, r1
 c32:	68 0f       	add	r22, r24
 c34:	79 1f       	adc	r23, r25
 c36:	8a 1f       	adc	r24, r26
 c38:	91 1d       	adc	r25, r1
 c3a:	a1 1d       	adc	r26, r1
 c3c:	6a 0f       	add	r22, r26
 c3e:	71 1d       	adc	r23, r1
 c40:	81 1d       	adc	r24, r1
 c42:	91 1d       	adc	r25, r1
 c44:	a1 1d       	adc	r26, r1
 c46:	20 d0       	rcall	.+64     	; 0xc88 <__ultoa_invert+0x84>
 c48:	09 f4       	brne	.+2      	; 0xc4c <__ultoa_invert+0x48>
 c4a:	68 94       	set
 c4c:	3f 91       	pop	r19
 c4e:	2a e0       	ldi	r18, 0x0A	; 10
 c50:	26 9f       	mul	r18, r22
 c52:	11 24       	eor	r1, r1
 c54:	30 19       	sub	r19, r0
 c56:	30 5d       	subi	r19, 0xD0	; 208
 c58:	31 93       	st	Z+, r19
 c5a:	de f6       	brtc	.-74     	; 0xc12 <__ultoa_invert+0xe>
 c5c:	cf 01       	movw	r24, r30
 c5e:	08 95       	ret
 c60:	46 2f       	mov	r20, r22
 c62:	47 70       	andi	r20, 0x07	; 7
 c64:	40 5d       	subi	r20, 0xD0	; 208
 c66:	41 93       	st	Z+, r20
 c68:	b3 e0       	ldi	r27, 0x03	; 3
 c6a:	0f d0       	rcall	.+30     	; 0xc8a <__ultoa_invert+0x86>
 c6c:	c9 f7       	brne	.-14     	; 0xc60 <__ultoa_invert+0x5c>
 c6e:	f6 cf       	rjmp	.-20     	; 0xc5c <__ultoa_invert+0x58>
 c70:	46 2f       	mov	r20, r22
 c72:	4f 70       	andi	r20, 0x0F	; 15
 c74:	40 5d       	subi	r20, 0xD0	; 208
 c76:	4a 33       	cpi	r20, 0x3A	; 58
 c78:	18 f0       	brcs	.+6      	; 0xc80 <__ultoa_invert+0x7c>
 c7a:	49 5d       	subi	r20, 0xD9	; 217
 c7c:	31 fd       	sbrc	r19, 1
 c7e:	40 52       	subi	r20, 0x20	; 32
 c80:	41 93       	st	Z+, r20
 c82:	02 d0       	rcall	.+4      	; 0xc88 <__ultoa_invert+0x84>
 c84:	a9 f7       	brne	.-22     	; 0xc70 <__ultoa_invert+0x6c>
 c86:	ea cf       	rjmp	.-44     	; 0xc5c <__ultoa_invert+0x58>
 c88:	b4 e0       	ldi	r27, 0x04	; 4
 c8a:	a6 95       	lsr	r26
 c8c:	97 95       	ror	r25
 c8e:	87 95       	ror	r24
 c90:	77 95       	ror	r23
 c92:	67 95       	ror	r22
 c94:	ba 95       	dec	r27
 c96:	c9 f7       	brne	.-14     	; 0xc8a <__ultoa_invert+0x86>
 c98:	00 97       	sbiw	r24, 0x00	; 0
 c9a:	61 05       	cpc	r22, r1
 c9c:	71 05       	cpc	r23, r1
 c9e:	08 95       	ret
 ca0:	9b 01       	movw	r18, r22
 ca2:	ac 01       	movw	r20, r24
 ca4:	0a 2e       	mov	r0, r26
 ca6:	06 94       	lsr	r0
 ca8:	57 95       	ror	r21
 caa:	47 95       	ror	r20
 cac:	37 95       	ror	r19
 cae:	27 95       	ror	r18
 cb0:	ba 95       	dec	r27
 cb2:	c9 f7       	brne	.-14     	; 0xca6 <__ultoa_invert+0xa2>
 cb4:	62 0f       	add	r22, r18
 cb6:	73 1f       	adc	r23, r19
 cb8:	84 1f       	adc	r24, r20
 cba:	95 1f       	adc	r25, r21
 cbc:	a0 1d       	adc	r26, r0
 cbe:	08 95       	ret

00000cc0 <__prologue_saves__>:
 cc0:	2f 92       	push	r2
 cc2:	3f 92       	push	r3
 cc4:	4f 92       	push	r4
 cc6:	5f 92       	push	r5
 cc8:	6f 92       	push	r6
 cca:	7f 92       	push	r7
 ccc:	8f 92       	push	r8
 cce:	9f 92       	push	r9
 cd0:	af 92       	push	r10
 cd2:	bf 92       	push	r11
 cd4:	cf 92       	push	r12
 cd6:	df 92       	push	r13
 cd8:	ef 92       	push	r14
 cda:	ff 92       	push	r15
 cdc:	0f 93       	push	r16
 cde:	1f 93       	push	r17
 ce0:	cf 93       	push	r28
 ce2:	df 93       	push	r29
 ce4:	cd b7       	in	r28, 0x3d	; 61
 ce6:	de b7       	in	r29, 0x3e	; 62
 ce8:	ca 1b       	sub	r28, r26
 cea:	db 0b       	sbc	r29, r27
 cec:	0f b6       	in	r0, 0x3f	; 63
 cee:	f8 94       	cli
 cf0:	de bf       	out	0x3e, r29	; 62
 cf2:	0f be       	out	0x3f, r0	; 63
 cf4:	cd bf       	out	0x3d, r28	; 61
 cf6:	09 94       	ijmp

00000cf8 <__epilogue_restores__>:
 cf8:	2a 88       	ldd	r2, Y+18	; 0x12
 cfa:	39 88       	ldd	r3, Y+17	; 0x11
 cfc:	48 88       	ldd	r4, Y+16	; 0x10
 cfe:	5f 84       	ldd	r5, Y+15	; 0x0f
 d00:	6e 84       	ldd	r6, Y+14	; 0x0e
 d02:	7d 84       	ldd	r7, Y+13	; 0x0d
 d04:	8c 84       	ldd	r8, Y+12	; 0x0c
 d06:	9b 84       	ldd	r9, Y+11	; 0x0b
 d08:	aa 84       	ldd	r10, Y+10	; 0x0a
 d0a:	b9 84       	ldd	r11, Y+9	; 0x09
 d0c:	c8 84       	ldd	r12, Y+8	; 0x08
 d0e:	df 80       	ldd	r13, Y+7	; 0x07
 d10:	ee 80       	ldd	r14, Y+6	; 0x06
 d12:	fd 80       	ldd	r15, Y+5	; 0x05
 d14:	0c 81       	ldd	r16, Y+4	; 0x04
 d16:	1b 81       	ldd	r17, Y+3	; 0x03
 d18:	aa 81       	ldd	r26, Y+2	; 0x02
 d1a:	b9 81       	ldd	r27, Y+1	; 0x01
 d1c:	ce 0f       	add	r28, r30
 d1e:	d1 1d       	adc	r29, r1
 d20:	0f b6       	in	r0, 0x3f	; 63
 d22:	f8 94       	cli
 d24:	de bf       	out	0x3e, r29	; 62
 d26:	0f be       	out	0x3f, r0	; 63
 d28:	cd bf       	out	0x3d, r28	; 61
 d2a:	ed 01       	movw	r28, r26
 d2c:	08 95       	ret

00000d2e <_exit>:
 d2e:	f8 94       	cli

00000d30 <__stop_program>:
 d30:	ff cf       	rjmp	.-2      	; 0xd30 <__stop_program>
