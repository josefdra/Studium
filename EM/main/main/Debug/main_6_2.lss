
main_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000023  00800100  00800100  000001fa  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001df  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000123  00000000  00000000  00000449  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000119  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000088  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000019c  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000010d  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000009b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e8       	ldi	r30, 0x86	; 134
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 32       	cpi	r26, 0x23	; 35
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  9e:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
uint8_t isEmpty = 1;
uint8_t received_chars = 0;
uint8_t flow_control_flag = 1; //xON gesetzt

void USART_Init(){
	UBRR0H = (BAUD_CONST >> 8);
  a6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUD_CONST;
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
  b0:	e1 ec       	ldi	r30, 0xC1	; 193
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 69       	ori	r24, 0x98	; 152
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <USART_Transmit>:
}

void USART_Transmit(unsigned char data){
	cli();
  bc:	f8 94       	cli
	while(!(UCSR0A & (1<<UDRE0)));
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	90 81       	ld	r25, Z
  c4:	95 ff       	sbrs	r25, 5
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <USART_Transmit+0x6>
	if(received_chars == (BUFFER_SIZE - 8))
  c8:	90 91 00 01 	lds	r25, 0x0100
  cc:	98 31       	cpi	r25, 0x18	; 24
  ce:	21 f4       	brne	.+8      	; 0xd8 <USART_Transmit+0x1c>
		UDR0 = 19;
  d0:	93 e1       	ldi	r25, 0x13	; 19
  d2:	90 93 c6 00 	sts	0x00C6, r25
  d6:	05 c0       	rjmp	.+10     	; 0xe2 <USART_Transmit+0x26>
	else if(received_chars == 8)
  d8:	98 30       	cpi	r25, 0x08	; 8
  da:	19 f4       	brne	.+6      	; 0xe2 <USART_Transmit+0x26>
		UDR0 = 17;
  dc:	91 e1       	ldi	r25, 0x11	; 17
  de:	90 93 c6 00 	sts	0x00C6, r25
	UDR0 = data;
  e2:	80 93 c6 00 	sts	0x00C6, r24
	received_chars--;
  e6:	80 91 00 01 	lds	r24, 0x0100
  ea:	81 50       	subi	r24, 0x01	; 1
  ec:	80 93 00 01 	sts	0x0100, r24
	sei();
  f0:	78 94       	sei
  f2:	08 95       	ret

000000f4 <USART_Receive>:
}

unsigned char USART_Receive(){
	cli();
  f4:	f8 94       	cli
	while(!(UCSR0A & (1<<RXC0)));
  f6:	e0 ec       	ldi	r30, 0xC0	; 192
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	88 23       	and	r24, r24
  fe:	ec f7       	brge	.-6      	; 0xfa <USART_Receive+0x6>
	char c = ring_buffer[rxTail];
 100:	20 91 01 01 	lds	r18, 0x0101
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	ed 5f       	subi	r30, 0xFD	; 253
 10a:	fe 4f       	sbci	r31, 0xFE	; 254
 10c:	80 81       	ld	r24, Z
	rxTail = (rxTail + 1) % BUFFER_SIZE;
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	3f 4f       	sbci	r19, 0xFF	; 255
 112:	2f 71       	andi	r18, 0x1F	; 31
 114:	30 78       	andi	r19, 0x80	; 128
 116:	20 93 01 01 	sts	0x0101, r18
	sei();
 11a:	78 94       	sei
	return c;
}
 11c:	08 95       	ret

0000011e <__vector_18>:

ISR(USART_RX_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
	char receivedChar = UDR0;
 132:	20 91 c6 00 	lds	r18, 0x00C6
	uint8_t nextHead = (rxHead + 1) % BUFFER_SIZE;
 136:	80 91 02 01 	lds	r24, 0x0102
 13a:	90 e0       	ldi	r25, 0x00	; 0
	ring_buffer[rxHead] = receivedChar;
 13c:	fc 01       	movw	r30, r24
 13e:	ed 5f       	subi	r30, 0xFD	; 253
 140:	fe 4f       	sbci	r31, 0xFE	; 254
 142:	20 83       	st	Z, r18
	return c;
}

ISR(USART_RX_vect){
	char receivedChar = UDR0;
	uint8_t nextHead = (rxHead + 1) % BUFFER_SIZE;
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	8f 71       	andi	r24, 0x1F	; 31
 148:	90 78       	andi	r25, 0x80	; 128
 14a:	80 93 02 01 	sts	0x0102, r24
	ring_buffer[rxHead] = receivedChar;
	rxHead = nextHead;
	received_chars++;
 14e:	80 91 00 01 	lds	r24, 0x0100
 152:	8f 5f       	subi	r24, 0xFF	; 255
 154:	80 93 00 01 	sts	0x0100, r24
}
 158:	ff 91       	pop	r31
 15a:	ef 91       	pop	r30
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <main>:

int main(void)
{
	sei();
 16c:	78 94       	sei
	USART_Init();
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	char d;
	UDR0 = 19;
 172:	83 e1       	ldi	r24, 0x13	; 19
 174:	80 93 c6 00 	sts	0x00C6, r24
	
	while(1)
	{
		d = USART_Receive();
 178:	0e 94 7a 00 	call	0xf4	; 0xf4 <USART_Receive>
		USART_Transmit(d);
 17c:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
 180:	fb cf       	rjmp	.-10     	; 0x178 <main+0xc>

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
