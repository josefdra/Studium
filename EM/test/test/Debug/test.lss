
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000035a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d8  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b5  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037a  00000000  00000000  00001399  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ae  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014b  00000000  00000000  00001b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001cb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  88:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setEvent>:
typedef uint16_t event_type;

volatile event_type events=0;

void setEvent(event_type ev) {
	unsigned char sreg_old = SREG;
  90:	2f b7       	in	r18, 0x3f	; 63
	cli();
  92:	f8 94       	cli
	events |= ev;
  94:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <events>
  98:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <events+0x1>
  9c:	84 2b       	or	r24, r20
  9e:	95 2b       	or	r25, r21
  a0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <events+0x1>
  a4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <events>
	SREG = sreg_old;
  a8:	2f bf       	out	0x3f, r18	; 63
	sei();
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <clearEvent>:
}

void clearEvent(event_type ev) {
	unsigned char sreg_old = SREG;
  ae:	4f b7       	in	r20, 0x3f	; 63
	cli();
  b0:	f8 94       	cli
	events &= ~ev;
  b2:	80 95       	com	r24
  b4:	90 95       	com	r25
  b6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <events>
  ba:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <events+0x1>
  be:	82 23       	and	r24, r18
  c0:	93 23       	and	r25, r19
  c2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <events+0x1>
  c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <events>
	SREG = sreg_old;
  ca:	4f bf       	out	0x3f, r20	; 63
	sei();
  cc:	78 94       	sei
  ce:	08 95       	ret

000000d0 <eventIsSet>:
}

int eventIsSet(event_type ev){
	return (events&ev);
  d0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <events>
  d4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <events+0x1>
}
  d8:	82 23       	and	r24, r18
  da:	93 23       	and	r25, r19
  dc:	08 95       	ret

000000de <__vector_16>:
volatile uint8_t safe;
volatile uint8_t var;
volatile uint8_t helper;
volatile uint8_t start_pressed = 0;

ISR(TIMER0_OVF_vect){
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	3f 93       	push	r19
  ec:	4f 93       	push	r20
  ee:	5f 93       	push	r21
  f0:	6f 93       	push	r22
  f2:	7f 93       	push	r23
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	af 93       	push	r26
  fa:	bf 93       	push	r27
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
	static uint16_t counter = 0;
	TCNT0 = 6;	
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	86 bd       	out	0x26, r24	; 38
	counter++;
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (counter==1000){
 116:	88 3e       	cpi	r24, 0xE8	; 232
 118:	93 40       	sbci	r25, 0x03	; 3
 11a:	41 f4       	brne	.+16     	; 0x12c <__vector_16+0x4e>
		counter = 0;
 11c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 120:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		setEvent(VAR_CHANGED);
 124:	88 e0       	ldi	r24, 0x08	; 8
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 48 00 	call	0x90	; 0x90 <setEvent>
	}
	if ((counter%50)==0){
 12c:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 130:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 134:	9a 01       	movw	r18, r20
 136:	36 95       	lsr	r19
 138:	27 95       	ror	r18
 13a:	ab e7       	ldi	r26, 0x7B	; 123
 13c:	b4 e1       	ldi	r27, 0x14	; 20
 13e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <__umulhisi3>
 142:	96 95       	lsr	r25
 144:	87 95       	ror	r24
 146:	62 e3       	ldi	r22, 0x32	; 50
 148:	68 9f       	mul	r22, r24
 14a:	90 01       	movw	r18, r0
 14c:	69 9f       	mul	r22, r25
 14e:	30 0d       	add	r19, r0
 150:	11 24       	eor	r1, r1
 152:	42 17       	cp	r20, r18
 154:	53 07       	cpc	r21, r19
 156:	a1 f4       	brne	.+40     	; 0x180 <__vector_16+0xa2>
		if(~PINC & 0x01){
 158:	30 99       	sbic	0x06, 0	; 6
 15a:	04 c0       	rjmp	.+8      	; 0x164 <__vector_16+0x86>
			setEvent(RESET);
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 48 00 	call	0x90	; 0x90 <setEvent>
		}
		if(~PIND & 0x04){
 164:	4a 99       	sbic	0x09, 2	; 9
 166:	04 c0       	rjmp	.+8      	; 0x170 <__vector_16+0x92>
			setEvent(START);
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 48 00 	call	0x90	; 0x90 <setEvent>
		}
		if(var == 8){
 170:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <var>
 174:	88 30       	cpi	r24, 0x08	; 8
 176:	21 f4       	brne	.+8      	; 0x180 <__vector_16+0xa2>
			setEvent(OVERFLOW);
 178:	84 e0       	ldi	r24, 0x04	; 4
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 48 00 	call	0x90	; 0x90 <setEvent>
		}
	}
}
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <main>:

int main(void)
{
	PORTD |= (1<<PORTD0)|(1<<PORTD1)|(1<<PORTD2)|(1<<PORTD5);
 1a2:	8b b1       	in	r24, 0x0b	; 11
 1a4:	87 62       	ori	r24, 0x27	; 39
 1a6:	8b b9       	out	0x0b, r24	; 11
	PORTC |= 0x03;
 1a8:	88 b1       	in	r24, 0x08	; 8
 1aa:	83 60       	ori	r24, 0x03	; 3
 1ac:	88 b9       	out	0x08, r24	; 8
	helper = PORTB;
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <helper>
	PORTB |= 0x0F;
 1b4:	85 b1       	in	r24, 0x05	; 5
 1b6:	8f 60       	ori	r24, 0x0F	; 15
 1b8:	85 b9       	out	0x05, r24	; 5
	DDRC = 0x02;	
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	87 b9       	out	0x07, r24	; 7
	DDRB = 0x0F;	
 1be:	8f e0       	ldi	r24, 0x0F	; 15
 1c0:	84 b9       	out	0x04, r24	; 4
	TCNT0 = 6;
 1c2:	86 e0       	ldi	r24, 0x06	; 6
 1c4:	86 bd       	out	0x26, r24	; 38
	TCCR0B &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
 1c6:	85 b5       	in	r24, 0x25	; 37
 1c8:	88 7f       	andi	r24, 0xF8	; 248
 1ca:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS01)|(1<<CS00);
 1cc:	85 b5       	in	r24, 0x25	; 37
 1ce:	83 60       	ori	r24, 0x03	; 3
 1d0:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<TOIE0);
 1d2:	ee e6       	ldi	r30, 0x6E	; 110
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	80 83       	st	Z, r24
	sei();
 1dc:	78 94       	sei
	safe = (PIND & 0x03);
 1de:	89 b1       	in	r24, 0x09	; 9
 1e0:	83 70       	andi	r24, 0x03	; 3
 1e2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <safe>
	safe |= ((PIND & 0x20) >> 3);
 1e6:	89 b1       	in	r24, 0x09	; 9
 1e8:	80 72       	andi	r24, 0x20	; 32
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	95 95       	asr	r25
 1ee:	87 95       	ror	r24
 1f0:	95 95       	asr	r25
 1f2:	87 95       	ror	r24
 1f4:	95 95       	asr	r25
 1f6:	87 95       	ror	r24
 1f8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <safe>
 1fc:	89 2b       	or	r24, r25
 1fe:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <safe>
	var = safe;
 202:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <safe>
 206:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <var>
	
	while(1)
	{
		if(eventIsSet(START))
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 68 00 	call	0xd0	; 0xd0 <eventIsSet>
 212:	89 2b       	or	r24, r25
 214:	d1 f3       	breq	.-12     	; 0x20a <main+0x68>
		{		
			clearEvent(START);
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 57 00 	call	0xae	; 0xae <clearEvent>
			while(!eventIsSet(RESET)){				
 21e:	2f c0       	rjmp	.+94     	; 0x27e <main+0xdc>
				if(eventIsSet(VAR_CHANGED)){
 220:	88 e0       	ldi	r24, 0x08	; 8
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 68 00 	call	0xd0	; 0xd0 <eventIsSet>
 228:	89 2b       	or	r24, r25
 22a:	d9 f0       	breq	.+54     	; 0x262 <main+0xc0>
					clearEvent(VAR_CHANGED);
 22c:	88 e0       	ldi	r24, 0x08	; 8
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 57 00 	call	0xae	; 0xae <clearEvent>
					helper &= 0xF8;
 234:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <helper>
 238:	88 7f       	andi	r24, 0xF8	; 248
 23a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <helper>
					helper |= var;
 23e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <var>
 242:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <helper>
 246:	89 2b       	or	r24, r25
 248:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <helper>
					PORTB = helper;
 24c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <helper>
 250:	85 b9       	out	0x05, r24	; 5
					helper = PORTB;
 252:	85 b1       	in	r24, 0x05	; 5
 254:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <helper>
					var++;
 258:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <var>
 25c:	8f 5f       	subi	r24, 0xFF	; 255
 25e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <var>
				}
				if (eventIsSet(OVERFLOW)){
 262:	84 e0       	ldi	r24, 0x04	; 4
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 68 00 	call	0xd0	; 0xd0 <eventIsSet>
 26a:	89 2b       	or	r24, r25
 26c:	41 f0       	breq	.+16     	; 0x27e <main+0xdc>
					clearEvent(OVERFLOW);
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 57 00 	call	0xae	; 0xae <clearEvent>
					var = safe;
 276:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <safe>
 27a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <var>
	while(1)
	{
		if(eventIsSet(START))
		{		
			clearEvent(START);
			while(!eventIsSet(RESET)){				
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 68 00 	call	0xd0	; 0xd0 <eventIsSet>
 286:	89 2b       	or	r24, r25
 288:	59 f2       	breq	.-106    	; 0x220 <main+0x7e>
				if (eventIsSet(OVERFLOW)){
					clearEvent(OVERFLOW);
					var = safe;
				}
			}
			clearEvent(RESET);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 57 00 	call	0xae	; 0xae <clearEvent>
			safe = (PIND & 0x03);
 292:	89 b1       	in	r24, 0x09	; 9
 294:	83 70       	andi	r24, 0x03	; 3
 296:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <safe>
			safe |= ((PIND & 0x20) >> 3);
 29a:	89 b1       	in	r24, 0x09	; 9
 29c:	80 72       	andi	r24, 0x20	; 32
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	95 95       	asr	r25
 2a2:	87 95       	ror	r24
 2a4:	95 95       	asr	r25
 2a6:	87 95       	ror	r24
 2a8:	95 95       	asr	r25
 2aa:	87 95       	ror	r24
 2ac:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <safe>
 2b0:	89 2b       	or	r24, r25
 2b2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <safe>
			var = safe;
 2b6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <safe>
 2ba:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <var>
			PORTB = 0x07;
 2be:	87 e0       	ldi	r24, 0x07	; 7
 2c0:	85 b9       	out	0x05, r24	; 5
 2c2:	a3 cf       	rjmp	.-186    	; 0x20a <main+0x68>

000002c4 <__umulhisi3>:
 2c4:	a2 9f       	mul	r26, r18
 2c6:	b0 01       	movw	r22, r0
 2c8:	b3 9f       	mul	r27, r19
 2ca:	c0 01       	movw	r24, r0
 2cc:	a3 9f       	mul	r26, r19
 2ce:	70 0d       	add	r23, r0
 2d0:	81 1d       	adc	r24, r1
 2d2:	11 24       	eor	r1, r1
 2d4:	91 1d       	adc	r25, r1
 2d6:	b2 9f       	mul	r27, r18
 2d8:	70 0d       	add	r23, r0
 2da:	81 1d       	adc	r24, r1
 2dc:	11 24       	eor	r1, r1
 2de:	91 1d       	adc	r25, r1
 2e0:	08 95       	ret

000002e2 <_exit>:
 2e2:	f8 94       	cli

000002e4 <__stop_program>:
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <__stop_program>
